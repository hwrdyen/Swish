
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model team
 * 
 */
export type team = $Result.DefaultSelection<Prisma.$teamPayload>
/**
 * Model game
 * 
 */
export type game = $Result.DefaultSelection<Prisma.$gamePayload>
/**
 * Model tournament
 * 
 */
export type tournament = $Result.DefaultSelection<Prisma.$tournamentPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.teamDelegate<ExtArgs>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.gameDelegate<ExtArgs>;

  /**
   * `prisma.tournament`: Exposes CRUD operations for the **tournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tournaments
    * const tournaments = await prisma.tournament.findMany()
    * ```
    */
  get tournament(): Prisma.tournamentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    team: 'team',
    game: 'game',
    tournament: 'tournament'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "team" | "game" | "tournament"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      team: {
        payload: Prisma.$teamPayload<ExtArgs>
        fields: Prisma.teamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.teamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.teamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload>
          }
          findFirst: {
            args: Prisma.teamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.teamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload>
          }
          findMany: {
            args: Prisma.teamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload>[]
          }
          create: {
            args: Prisma.teamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload>
          }
          createMany: {
            args: Prisma.teamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.teamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload>[]
          }
          delete: {
            args: Prisma.teamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload>
          }
          update: {
            args: Prisma.teamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload>
          }
          deleteMany: {
            args: Prisma.teamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.teamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.teamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.teamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.teamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      game: {
        payload: Prisma.$gamePayload<ExtArgs>
        fields: Prisma.gameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.gameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.gameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          findFirst: {
            args: Prisma.gameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.gameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          findMany: {
            args: Prisma.gameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>[]
          }
          create: {
            args: Prisma.gameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          createMany: {
            args: Prisma.gameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.gameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>[]
          }
          delete: {
            args: Prisma.gameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          update: {
            args: Prisma.gameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          deleteMany: {
            args: Prisma.gameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.gameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.gameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.gameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.gameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      tournament: {
        payload: Prisma.$tournamentPayload<ExtArgs>
        fields: Prisma.tournamentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tournamentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tournamentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload>
          }
          findFirst: {
            args: Prisma.tournamentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tournamentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload>
          }
          findMany: {
            args: Prisma.tournamentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload>[]
          }
          create: {
            args: Prisma.tournamentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload>
          }
          createMany: {
            args: Prisma.tournamentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.tournamentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload>[]
          }
          delete: {
            args: Prisma.tournamentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload>
          }
          update: {
            args: Prisma.tournamentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload>
          }
          deleteMany: {
            args: Prisma.tournamentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tournamentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tournamentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tournamentPayload>
          }
          aggregate: {
            args: Prisma.TournamentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournament>
          }
          groupBy: {
            args: Prisma.tournamentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentGroupByOutputType>[]
          }
          count: {
            args: Prisma.tournamentCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    created_teams: number
    teams: number
    coaching_teams: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    created_teams?: boolean | UserCountOutputTypeCountCreated_teamsArgs
    teams?: boolean | UserCountOutputTypeCountTeamsArgs
    coaching_teams?: boolean | UserCountOutputTypeCountCoaching_teamsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreated_teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCoaching_teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    player_list: number
    coach_list: number
    home_games: number
    away_games: number
    tournaments: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player_list?: boolean | TeamCountOutputTypeCountPlayer_listArgs
    coach_list?: boolean | TeamCountOutputTypeCountCoach_listArgs
    home_games?: boolean | TeamCountOutputTypeCountHome_gamesArgs
    away_games?: boolean | TeamCountOutputTypeCountAway_gamesArgs
    tournaments?: boolean | TeamCountOutputTypeCountTournamentsArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPlayer_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountCoach_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountHome_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gameWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountAway_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gameWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tournamentWhereInput
  }


  /**
   * Count Type TournamentCountOutputType
   */

  export type TournamentCountOutputType = {
    team_list: number
    game_list: number
  }

  export type TournamentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team_list?: boolean | TournamentCountOutputTypeCountTeam_listArgs
    game_list?: boolean | TournamentCountOutputTypeCountGame_listArgs
  }

  // Custom InputTypes
  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentCountOutputType
     */
    select?: TournamentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountTeam_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountGame_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gameWhereInput
  }


  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    avatar: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    created_teams?: boolean | user$created_teamsArgs<ExtArgs>
    teams?: boolean | user$teamsArgs<ExtArgs>
    coaching_teams?: boolean | user$coaching_teamsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    created_teams?: boolean | user$created_teamsArgs<ExtArgs>
    teams?: boolean | user$teamsArgs<ExtArgs>
    coaching_teams?: boolean | user$coaching_teamsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      created_teams: Prisma.$teamPayload<ExtArgs>[]
      teams: Prisma.$teamPayload<ExtArgs>[]
      coaching_teams: Prisma.$teamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password: string
      avatar: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {userCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userCreateManyAndReturnArgs>(args?: SelectSubset<T, userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    created_teams<T extends user$created_teamsArgs<ExtArgs> = {}>(args?: Subset<T, user$created_teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findMany"> | Null>
    teams<T extends user$teamsArgs<ExtArgs> = {}>(args?: Subset<T, user$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findMany"> | Null>
    coaching_teams<T extends user$coaching_teamsArgs<ExtArgs> = {}>(args?: Subset<T, user$coaching_teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly username: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly avatar: FieldRef<"user", 'String'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
    readonly updatedAt: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user createManyAndReturn
   */
  export type userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.created_teams
   */
  export type user$created_teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    where?: teamWhereInput
    orderBy?: teamOrderByWithRelationInput | teamOrderByWithRelationInput[]
    cursor?: teamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * user.teams
   */
  export type user$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    where?: teamWhereInput
    orderBy?: teamOrderByWithRelationInput | teamOrderByWithRelationInput[]
    cursor?: teamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * user.coaching_teams
   */
  export type user$coaching_teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    where?: teamWhereInput
    orderBy?: teamOrderByWithRelationInput | teamOrderByWithRelationInput[]
    cursor?: teamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    team_name: string | null
    team_avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    team_creator_id: string | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    team_name: string | null
    team_avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    team_creator_id: string | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    team_name: number
    team_avatar: number
    createdAt: number
    updatedAt: number
    team_creator_id: number
    _all: number
  }


  export type TeamMinAggregateInputType = {
    id?: true
    team_name?: true
    team_avatar?: true
    createdAt?: true
    updatedAt?: true
    team_creator_id?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    team_name?: true
    team_avatar?: true
    createdAt?: true
    updatedAt?: true
    team_creator_id?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    team_name?: true
    team_avatar?: true
    createdAt?: true
    updatedAt?: true
    team_creator_id?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which team to aggregate.
     */
    where?: teamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamOrderByWithRelationInput | teamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: teamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type teamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teamWhereInput
    orderBy?: teamOrderByWithAggregationInput | teamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: teamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    team_name: string
    team_avatar: string | null
    createdAt: Date
    updatedAt: Date
    team_creator_id: string
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends teamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type teamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_name?: boolean
    team_avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team_creator_id?: boolean
    creator?: boolean | userDefaultArgs<ExtArgs>
    player_list?: boolean | team$player_listArgs<ExtArgs>
    coach_list?: boolean | team$coach_listArgs<ExtArgs>
    home_games?: boolean | team$home_gamesArgs<ExtArgs>
    away_games?: boolean | team$away_gamesArgs<ExtArgs>
    tournaments?: boolean | team$tournamentsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type teamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_name?: boolean
    team_avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team_creator_id?: boolean
    creator?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type teamSelectScalar = {
    id?: boolean
    team_name?: boolean
    team_avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team_creator_id?: boolean
  }

  export type teamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | userDefaultArgs<ExtArgs>
    player_list?: boolean | team$player_listArgs<ExtArgs>
    coach_list?: boolean | team$coach_listArgs<ExtArgs>
    home_games?: boolean | team$home_gamesArgs<ExtArgs>
    away_games?: boolean | team$away_gamesArgs<ExtArgs>
    tournaments?: boolean | team$tournamentsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type teamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $teamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "team"
    objects: {
      creator: Prisma.$userPayload<ExtArgs>
      player_list: Prisma.$userPayload<ExtArgs>[]
      coach_list: Prisma.$userPayload<ExtArgs>[]
      home_games: Prisma.$gamePayload<ExtArgs>[]
      away_games: Prisma.$gamePayload<ExtArgs>[]
      tournaments: Prisma.$tournamentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      team_name: string
      team_avatar: string | null
      createdAt: Date
      updatedAt: Date
      team_creator_id: string
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type teamGetPayload<S extends boolean | null | undefined | teamDefaultArgs> = $Result.GetResult<Prisma.$teamPayload, S>

  type teamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<teamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface teamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['team'], meta: { name: 'team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {teamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends teamFindUniqueArgs>(args: SelectSubset<T, teamFindUniqueArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {teamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends teamFindUniqueOrThrowArgs>(args: SelectSubset<T, teamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends teamFindFirstArgs>(args?: SelectSubset<T, teamFindFirstArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends teamFindFirstOrThrowArgs>(args?: SelectSubset<T, teamFindFirstOrThrowArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends teamFindManyArgs>(args?: SelectSubset<T, teamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team.
     * @param {teamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends teamCreateArgs>(args: SelectSubset<T, teamCreateArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {teamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends teamCreateManyArgs>(args?: SelectSubset<T, teamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {teamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends teamCreateManyAndReturnArgs>(args?: SelectSubset<T, teamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Team.
     * @param {teamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends teamDeleteArgs>(args: SelectSubset<T, teamDeleteArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team.
     * @param {teamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends teamUpdateArgs>(args: SelectSubset<T, teamUpdateArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {teamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends teamDeleteManyArgs>(args?: SelectSubset<T, teamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends teamUpdateManyArgs>(args: SelectSubset<T, teamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {teamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends teamUpsertArgs>(args: SelectSubset<T, teamUpsertArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends teamCountArgs>(
      args?: Subset<T, teamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends teamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: teamGroupByArgs['orderBy'] }
        : { orderBy?: teamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, teamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the team model
   */
  readonly fields: teamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__teamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    player_list<T extends team$player_listArgs<ExtArgs> = {}>(args?: Subset<T, team$player_listArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany"> | Null>
    coach_list<T extends team$coach_listArgs<ExtArgs> = {}>(args?: Subset<T, team$coach_listArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany"> | Null>
    home_games<T extends team$home_gamesArgs<ExtArgs> = {}>(args?: Subset<T, team$home_gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findMany"> | Null>
    away_games<T extends team$away_gamesArgs<ExtArgs> = {}>(args?: Subset<T, team$away_gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findMany"> | Null>
    tournaments<T extends team$tournamentsArgs<ExtArgs> = {}>(args?: Subset<T, team$tournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the team model
   */ 
  interface teamFieldRefs {
    readonly id: FieldRef<"team", 'String'>
    readonly team_name: FieldRef<"team", 'String'>
    readonly team_avatar: FieldRef<"team", 'String'>
    readonly createdAt: FieldRef<"team", 'DateTime'>
    readonly updatedAt: FieldRef<"team", 'DateTime'>
    readonly team_creator_id: FieldRef<"team", 'String'>
  }
    

  // Custom InputTypes
  /**
   * team findUnique
   */
  export type teamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    /**
     * Filter, which team to fetch.
     */
    where: teamWhereUniqueInput
  }

  /**
   * team findUniqueOrThrow
   */
  export type teamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    /**
     * Filter, which team to fetch.
     */
    where: teamWhereUniqueInput
  }

  /**
   * team findFirst
   */
  export type teamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    /**
     * Filter, which team to fetch.
     */
    where?: teamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamOrderByWithRelationInput | teamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teams.
     */
    cursor?: teamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * team findFirstOrThrow
   */
  export type teamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    /**
     * Filter, which team to fetch.
     */
    where?: teamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamOrderByWithRelationInput | teamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teams.
     */
    cursor?: teamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * team findMany
   */
  export type teamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    /**
     * Filter, which teams to fetch.
     */
    where?: teamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teams to fetch.
     */
    orderBy?: teamOrderByWithRelationInput | teamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teams.
     */
    cursor?: teamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * team create
   */
  export type teamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    /**
     * The data needed to create a team.
     */
    data: XOR<teamCreateInput, teamUncheckedCreateInput>
  }

  /**
   * team createMany
   */
  export type teamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many teams.
     */
    data: teamCreateManyInput | teamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * team createManyAndReturn
   */
  export type teamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many teams.
     */
    data: teamCreateManyInput | teamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * team update
   */
  export type teamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    /**
     * The data needed to update a team.
     */
    data: XOR<teamUpdateInput, teamUncheckedUpdateInput>
    /**
     * Choose, which team to update.
     */
    where: teamWhereUniqueInput
  }

  /**
   * team updateMany
   */
  export type teamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update teams.
     */
    data: XOR<teamUpdateManyMutationInput, teamUncheckedUpdateManyInput>
    /**
     * Filter which teams to update
     */
    where?: teamWhereInput
  }

  /**
   * team upsert
   */
  export type teamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    /**
     * The filter to search for the team to update in case it exists.
     */
    where: teamWhereUniqueInput
    /**
     * In case the team found by the `where` argument doesn't exist, create a new team with this data.
     */
    create: XOR<teamCreateInput, teamUncheckedCreateInput>
    /**
     * In case the team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<teamUpdateInput, teamUncheckedUpdateInput>
  }

  /**
   * team delete
   */
  export type teamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    /**
     * Filter which team to delete.
     */
    where: teamWhereUniqueInput
  }

  /**
   * team deleteMany
   */
  export type teamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teams to delete
     */
    where?: teamWhereInput
  }

  /**
   * team.player_list
   */
  export type team$player_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    cursor?: userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * team.coach_list
   */
  export type team$coach_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    cursor?: userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * team.home_games
   */
  export type team$home_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    where?: gameWhereInput
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    cursor?: gameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * team.away_games
   */
  export type team$away_gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    where?: gameWhereInput
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    cursor?: gameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * team.tournaments
   */
  export type team$tournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    where?: tournamentWhereInput
    orderBy?: tournamentOrderByWithRelationInput | tournamentOrderByWithRelationInput[]
    cursor?: tournamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * team without action
   */
  export type teamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
  }


  /**
   * Model game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    home_team_score: number | null
    away_team_score: number | null
  }

  export type GameSumAggregateOutputType = {
    home_team_score: number | null
    away_team_score: number | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    game_date: Date | null
    home_team_score: number | null
    away_team_score: number | null
    createdAt: Date | null
    updatedAt: Date | null
    home_team_id: string | null
    away_team_id: string | null
    tournament_id: string | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    game_date: Date | null
    home_team_score: number | null
    away_team_score: number | null
    createdAt: Date | null
    updatedAt: Date | null
    home_team_id: string | null
    away_team_id: string | null
    tournament_id: string | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    game_date: number
    home_team_score: number
    away_team_score: number
    createdAt: number
    updatedAt: number
    home_team_id: number
    away_team_id: number
    tournament_id: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    home_team_score?: true
    away_team_score?: true
  }

  export type GameSumAggregateInputType = {
    home_team_score?: true
    away_team_score?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    game_date?: true
    home_team_score?: true
    away_team_score?: true
    createdAt?: true
    updatedAt?: true
    home_team_id?: true
    away_team_id?: true
    tournament_id?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    game_date?: true
    home_team_score?: true
    away_team_score?: true
    createdAt?: true
    updatedAt?: true
    home_team_id?: true
    away_team_id?: true
    tournament_id?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    game_date?: true
    home_team_score?: true
    away_team_score?: true
    createdAt?: true
    updatedAt?: true
    home_team_id?: true
    away_team_id?: true
    tournament_id?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game to aggregate.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type gameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gameWhereInput
    orderBy?: gameOrderByWithAggregationInput | gameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: gameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: string
    game_date: Date
    home_team_score: number | null
    away_team_score: number | null
    createdAt: Date
    updatedAt: Date
    home_team_id: string
    away_team_id: string
    tournament_id: string
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends gameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type gameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_date?: boolean
    home_team_score?: boolean
    away_team_score?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    home_team_id?: boolean
    away_team_id?: boolean
    tournament_id?: boolean
    home_team?: boolean | teamDefaultArgs<ExtArgs>
    away_team?: boolean | teamDefaultArgs<ExtArgs>
    tournament?: boolean | game$tournamentArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type gameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    game_date?: boolean
    home_team_score?: boolean
    away_team_score?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    home_team_id?: boolean
    away_team_id?: boolean
    tournament_id?: boolean
    home_team?: boolean | teamDefaultArgs<ExtArgs>
    away_team?: boolean | teamDefaultArgs<ExtArgs>
    tournament?: boolean | game$tournamentArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type gameSelectScalar = {
    id?: boolean
    game_date?: boolean
    home_team_score?: boolean
    away_team_score?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    home_team_id?: boolean
    away_team_id?: boolean
    tournament_id?: boolean
  }

  export type gameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    home_team?: boolean | teamDefaultArgs<ExtArgs>
    away_team?: boolean | teamDefaultArgs<ExtArgs>
    tournament?: boolean | game$tournamentArgs<ExtArgs>
  }
  export type gameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    home_team?: boolean | teamDefaultArgs<ExtArgs>
    away_team?: boolean | teamDefaultArgs<ExtArgs>
    tournament?: boolean | game$tournamentArgs<ExtArgs>
  }

  export type $gamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "game"
    objects: {
      home_team: Prisma.$teamPayload<ExtArgs>
      away_team: Prisma.$teamPayload<ExtArgs>
      tournament: Prisma.$tournamentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      game_date: Date
      home_team_score: number | null
      away_team_score: number | null
      createdAt: Date
      updatedAt: Date
      home_team_id: string
      away_team_id: string
      tournament_id: string
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type gameGetPayload<S extends boolean | null | undefined | gameDefaultArgs> = $Result.GetResult<Prisma.$gamePayload, S>

  type gameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<gameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface gameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game'], meta: { name: 'game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {gameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends gameFindUniqueArgs>(args: SelectSubset<T, gameFindUniqueArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {gameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends gameFindUniqueOrThrowArgs>(args: SelectSubset<T, gameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends gameFindFirstArgs>(args?: SelectSubset<T, gameFindFirstArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends gameFindFirstOrThrowArgs>(args?: SelectSubset<T, gameFindFirstOrThrowArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends gameFindManyArgs>(args?: SelectSubset<T, gameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Game.
     * @param {gameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends gameCreateArgs>(args: SelectSubset<T, gameCreateArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Games.
     * @param {gameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends gameCreateManyArgs>(args?: SelectSubset<T, gameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {gameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends gameCreateManyAndReturnArgs>(args?: SelectSubset<T, gameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Game.
     * @param {gameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends gameDeleteArgs>(args: SelectSubset<T, gameDeleteArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Game.
     * @param {gameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends gameUpdateArgs>(args: SelectSubset<T, gameUpdateArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {gameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends gameDeleteManyArgs>(args?: SelectSubset<T, gameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends gameUpdateManyArgs>(args: SelectSubset<T, gameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {gameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends gameUpsertArgs>(args: SelectSubset<T, gameUpsertArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends gameCountArgs>(
      args?: Subset<T, gameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends gameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: gameGroupByArgs['orderBy'] }
        : { orderBy?: gameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, gameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the game model
   */
  readonly fields: gameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__gameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    home_team<T extends teamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, teamDefaultArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    away_team<T extends teamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, teamDefaultArgs<ExtArgs>>): Prisma__teamClient<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tournament<T extends game$tournamentArgs<ExtArgs> = {}>(args?: Subset<T, game$tournamentArgs<ExtArgs>>): Prisma__tournamentClient<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the game model
   */ 
  interface gameFieldRefs {
    readonly id: FieldRef<"game", 'String'>
    readonly game_date: FieldRef<"game", 'DateTime'>
    readonly home_team_score: FieldRef<"game", 'Int'>
    readonly away_team_score: FieldRef<"game", 'Int'>
    readonly createdAt: FieldRef<"game", 'DateTime'>
    readonly updatedAt: FieldRef<"game", 'DateTime'>
    readonly home_team_id: FieldRef<"game", 'String'>
    readonly away_team_id: FieldRef<"game", 'String'>
    readonly tournament_id: FieldRef<"game", 'String'>
  }
    

  // Custom InputTypes
  /**
   * game findUnique
   */
  export type gameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where: gameWhereUniqueInput
  }

  /**
   * game findUniqueOrThrow
   */
  export type gameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where: gameWhereUniqueInput
  }

  /**
   * game findFirst
   */
  export type gameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * game findFirstOrThrow
   */
  export type gameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * game findMany
   */
  export type gameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which games to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * game create
   */
  export type gameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * The data needed to create a game.
     */
    data: XOR<gameCreateInput, gameUncheckedCreateInput>
  }

  /**
   * game createMany
   */
  export type gameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many games.
     */
    data: gameCreateManyInput | gameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * game createManyAndReturn
   */
  export type gameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many games.
     */
    data: gameCreateManyInput | gameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * game update
   */
  export type gameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * The data needed to update a game.
     */
    data: XOR<gameUpdateInput, gameUncheckedUpdateInput>
    /**
     * Choose, which game to update.
     */
    where: gameWhereUniqueInput
  }

  /**
   * game updateMany
   */
  export type gameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update games.
     */
    data: XOR<gameUpdateManyMutationInput, gameUncheckedUpdateManyInput>
    /**
     * Filter which games to update
     */
    where?: gameWhereInput
  }

  /**
   * game upsert
   */
  export type gameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * The filter to search for the game to update in case it exists.
     */
    where: gameWhereUniqueInput
    /**
     * In case the game found by the `where` argument doesn't exist, create a new game with this data.
     */
    create: XOR<gameCreateInput, gameUncheckedCreateInput>
    /**
     * In case the game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<gameUpdateInput, gameUncheckedUpdateInput>
  }

  /**
   * game delete
   */
  export type gameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter which game to delete.
     */
    where: gameWhereUniqueInput
  }

  /**
   * game deleteMany
   */
  export type gameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which games to delete
     */
    where?: gameWhereInput
  }

  /**
   * game.tournament
   */
  export type game$tournamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    where?: tournamentWhereInput
  }

  /**
   * game without action
   */
  export type gameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
  }


  /**
   * Model tournament
   */

  export type AggregateTournament = {
    _count: TournamentCountAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  export type TournamentMinAggregateOutputType = {
    id: string | null
    tournament_name: string | null
    tournament_avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentMaxAggregateOutputType = {
    id: string | null
    tournament_name: string | null
    tournament_avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TournamentCountAggregateOutputType = {
    id: number
    tournament_name: number
    tournament_avatar: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TournamentMinAggregateInputType = {
    id?: true
    tournament_name?: true
    tournament_avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentMaxAggregateInputType = {
    id?: true
    tournament_name?: true
    tournament_avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TournamentCountAggregateInputType = {
    id?: true
    tournament_name?: true
    tournament_avatar?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TournamentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tournament to aggregate.
     */
    where?: tournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tournaments to fetch.
     */
    orderBy?: tournamentOrderByWithRelationInput | tournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tournaments
    **/
    _count?: true | TournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMaxAggregateInputType
  }

  export type GetTournamentAggregateType<T extends TournamentAggregateArgs> = {
        [P in keyof T & keyof AggregateTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournament[P]>
      : GetScalarType<T[P], AggregateTournament[P]>
  }




  export type tournamentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tournamentWhereInput
    orderBy?: tournamentOrderByWithAggregationInput | tournamentOrderByWithAggregationInput[]
    by: TournamentScalarFieldEnum[] | TournamentScalarFieldEnum
    having?: tournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentCountAggregateInputType | true
    _min?: TournamentMinAggregateInputType
    _max?: TournamentMaxAggregateInputType
  }

  export type TournamentGroupByOutputType = {
    id: string
    tournament_name: string
    tournament_avatar: string | null
    createdAt: Date
    updatedAt: Date
    _count: TournamentCountAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  type GetTournamentGroupByPayload<T extends tournamentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentGroupByOutputType[P]>
        }
      >
    >


  export type tournamentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournament_name?: boolean
    tournament_avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team_list?: boolean | tournament$team_listArgs<ExtArgs>
    game_list?: boolean | tournament$game_listArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type tournamentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournament_name?: boolean
    tournament_avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tournament"]>

  export type tournamentSelectScalar = {
    id?: boolean
    tournament_name?: boolean
    tournament_avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type tournamentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team_list?: boolean | tournament$team_listArgs<ExtArgs>
    game_list?: boolean | tournament$game_listArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type tournamentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $tournamentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tournament"
    objects: {
      team_list: Prisma.$teamPayload<ExtArgs>[]
      game_list: Prisma.$gamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tournament_name: string
      tournament_avatar: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tournament"]>
    composites: {}
  }

  type tournamentGetPayload<S extends boolean | null | undefined | tournamentDefaultArgs> = $Result.GetResult<Prisma.$tournamentPayload, S>

  type tournamentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tournamentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TournamentCountAggregateInputType | true
    }

  export interface tournamentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tournament'], meta: { name: 'tournament' } }
    /**
     * Find zero or one Tournament that matches the filter.
     * @param {tournamentFindUniqueArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tournamentFindUniqueArgs>(args: SelectSubset<T, tournamentFindUniqueArgs<ExtArgs>>): Prisma__tournamentClient<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tournament that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {tournamentFindUniqueOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tournamentFindUniqueOrThrowArgs>(args: SelectSubset<T, tournamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tournamentClient<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tournamentFindFirstArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tournamentFindFirstArgs>(args?: SelectSubset<T, tournamentFindFirstArgs<ExtArgs>>): Prisma__tournamentClient<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tournament that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tournamentFindFirstOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tournamentFindFirstOrThrowArgs>(args?: SelectSubset<T, tournamentFindFirstOrThrowArgs<ExtArgs>>): Prisma__tournamentClient<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tournamentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tournaments
     * const tournaments = await prisma.tournament.findMany()
     * 
     * // Get first 10 Tournaments
     * const tournaments = await prisma.tournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentWithIdOnly = await prisma.tournament.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends tournamentFindManyArgs>(args?: SelectSubset<T, tournamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tournament.
     * @param {tournamentCreateArgs} args - Arguments to create a Tournament.
     * @example
     * // Create one Tournament
     * const Tournament = await prisma.tournament.create({
     *   data: {
     *     // ... data to create a Tournament
     *   }
     * })
     * 
     */
    create<T extends tournamentCreateArgs>(args: SelectSubset<T, tournamentCreateArgs<ExtArgs>>): Prisma__tournamentClient<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tournaments.
     * @param {tournamentCreateManyArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tournamentCreateManyArgs>(args?: SelectSubset<T, tournamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tournaments and returns the data saved in the database.
     * @param {tournamentCreateManyAndReturnArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tournaments and only return the `id`
     * const tournamentWithIdOnly = await prisma.tournament.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends tournamentCreateManyAndReturnArgs>(args?: SelectSubset<T, tournamentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tournament.
     * @param {tournamentDeleteArgs} args - Arguments to delete one Tournament.
     * @example
     * // Delete one Tournament
     * const Tournament = await prisma.tournament.delete({
     *   where: {
     *     // ... filter to delete one Tournament
     *   }
     * })
     * 
     */
    delete<T extends tournamentDeleteArgs>(args: SelectSubset<T, tournamentDeleteArgs<ExtArgs>>): Prisma__tournamentClient<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tournament.
     * @param {tournamentUpdateArgs} args - Arguments to update one Tournament.
     * @example
     * // Update one Tournament
     * const tournament = await prisma.tournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tournamentUpdateArgs>(args: SelectSubset<T, tournamentUpdateArgs<ExtArgs>>): Prisma__tournamentClient<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tournaments.
     * @param {tournamentDeleteManyArgs} args - Arguments to filter Tournaments to delete.
     * @example
     * // Delete a few Tournaments
     * const { count } = await prisma.tournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tournamentDeleteManyArgs>(args?: SelectSubset<T, tournamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tournamentUpdateManyArgs>(args: SelectSubset<T, tournamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tournament.
     * @param {tournamentUpsertArgs} args - Arguments to update or create a Tournament.
     * @example
     * // Update or create a Tournament
     * const tournament = await prisma.tournament.upsert({
     *   create: {
     *     // ... data to create a Tournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tournament we want to update
     *   }
     * })
     */
    upsert<T extends tournamentUpsertArgs>(args: SelectSubset<T, tournamentUpsertArgs<ExtArgs>>): Prisma__tournamentClient<$Result.GetResult<Prisma.$tournamentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tournamentCountArgs} args - Arguments to filter Tournaments to count.
     * @example
     * // Count the number of Tournaments
     * const count = await prisma.tournament.count({
     *   where: {
     *     // ... the filter for the Tournaments we want to count
     *   }
     * })
    **/
    count<T extends tournamentCountArgs>(
      args?: Subset<T, tournamentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentAggregateArgs>(args: Subset<T, TournamentAggregateArgs>): Prisma.PrismaPromise<GetTournamentAggregateType<T>>

    /**
     * Group by Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tournamentGroupByArgs['orderBy'] }
        : { orderBy?: tournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tournament model
   */
  readonly fields: tournamentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tournamentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team_list<T extends tournament$team_listArgs<ExtArgs> = {}>(args?: Subset<T, tournament$team_listArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teamPayload<ExtArgs>, T, "findMany"> | Null>
    game_list<T extends tournament$game_listArgs<ExtArgs> = {}>(args?: Subset<T, tournament$game_listArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tournament model
   */ 
  interface tournamentFieldRefs {
    readonly id: FieldRef<"tournament", 'String'>
    readonly tournament_name: FieldRef<"tournament", 'String'>
    readonly tournament_avatar: FieldRef<"tournament", 'String'>
    readonly createdAt: FieldRef<"tournament", 'DateTime'>
    readonly updatedAt: FieldRef<"tournament", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tournament findUnique
   */
  export type tournamentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    /**
     * Filter, which tournament to fetch.
     */
    where: tournamentWhereUniqueInput
  }

  /**
   * tournament findUniqueOrThrow
   */
  export type tournamentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    /**
     * Filter, which tournament to fetch.
     */
    where: tournamentWhereUniqueInput
  }

  /**
   * tournament findFirst
   */
  export type tournamentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    /**
     * Filter, which tournament to fetch.
     */
    where?: tournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tournaments to fetch.
     */
    orderBy?: tournamentOrderByWithRelationInput | tournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tournaments.
     */
    cursor?: tournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * tournament findFirstOrThrow
   */
  export type tournamentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    /**
     * Filter, which tournament to fetch.
     */
    where?: tournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tournaments to fetch.
     */
    orderBy?: tournamentOrderByWithRelationInput | tournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tournaments.
     */
    cursor?: tournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * tournament findMany
   */
  export type tournamentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    /**
     * Filter, which tournaments to fetch.
     */
    where?: tournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tournaments to fetch.
     */
    orderBy?: tournamentOrderByWithRelationInput | tournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tournaments.
     */
    cursor?: tournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tournaments.
     */
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * tournament create
   */
  export type tournamentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    /**
     * The data needed to create a tournament.
     */
    data: XOR<tournamentCreateInput, tournamentUncheckedCreateInput>
  }

  /**
   * tournament createMany
   */
  export type tournamentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tournaments.
     */
    data: tournamentCreateManyInput | tournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tournament createManyAndReturn
   */
  export type tournamentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many tournaments.
     */
    data: tournamentCreateManyInput | tournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tournament update
   */
  export type tournamentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    /**
     * The data needed to update a tournament.
     */
    data: XOR<tournamentUpdateInput, tournamentUncheckedUpdateInput>
    /**
     * Choose, which tournament to update.
     */
    where: tournamentWhereUniqueInput
  }

  /**
   * tournament updateMany
   */
  export type tournamentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tournaments.
     */
    data: XOR<tournamentUpdateManyMutationInput, tournamentUncheckedUpdateManyInput>
    /**
     * Filter which tournaments to update
     */
    where?: tournamentWhereInput
  }

  /**
   * tournament upsert
   */
  export type tournamentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    /**
     * The filter to search for the tournament to update in case it exists.
     */
    where: tournamentWhereUniqueInput
    /**
     * In case the tournament found by the `where` argument doesn't exist, create a new tournament with this data.
     */
    create: XOR<tournamentCreateInput, tournamentUncheckedCreateInput>
    /**
     * In case the tournament was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tournamentUpdateInput, tournamentUncheckedUpdateInput>
  }

  /**
   * tournament delete
   */
  export type tournamentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
    /**
     * Filter which tournament to delete.
     */
    where: tournamentWhereUniqueInput
  }

  /**
   * tournament deleteMany
   */
  export type tournamentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tournaments to delete
     */
    where?: tournamentWhereInput
  }

  /**
   * tournament.team_list
   */
  export type tournament$team_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the team
     */
    select?: teamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: teamInclude<ExtArgs> | null
    where?: teamWhereInput
    orderBy?: teamOrderByWithRelationInput | teamOrderByWithRelationInput[]
    cursor?: teamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * tournament.game_list
   */
  export type tournament$game_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    where?: gameWhereInput
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    cursor?: gameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * tournament without action
   */
  export type tournamentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tournament
     */
    select?: tournamentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tournamentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    team_name: 'team_name',
    team_avatar: 'team_avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    team_creator_id: 'team_creator_id'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    game_date: 'game_date',
    home_team_score: 'home_team_score',
    away_team_score: 'away_team_score',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    home_team_id: 'home_team_id',
    away_team_id: 'away_team_id',
    tournament_id: 'tournament_id'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const TournamentScalarFieldEnum: {
    id: 'id',
    tournament_name: 'tournament_name',
    tournament_avatar: 'tournament_avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TournamentScalarFieldEnum = (typeof TournamentScalarFieldEnum)[keyof typeof TournamentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    username?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    avatar?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    created_teams?: TeamListRelationFilter
    teams?: TeamListRelationFilter
    coaching_teams?: TeamListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    created_teams?: teamOrderByRelationAggregateInput
    teams?: teamOrderByRelationAggregateInput
    coaching_teams?: teamOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    password?: StringFilter<"user"> | string
    avatar?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    created_teams?: TeamListRelationFilter
    teams?: TeamListRelationFilter
    coaching_teams?: TeamListRelationFilter
  }, "id" | "id" | "email" | "username">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    username?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    avatar?: StringNullableWithAggregatesFilter<"user"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type teamWhereInput = {
    AND?: teamWhereInput | teamWhereInput[]
    OR?: teamWhereInput[]
    NOT?: teamWhereInput | teamWhereInput[]
    id?: StringFilter<"team"> | string
    team_name?: StringFilter<"team"> | string
    team_avatar?: StringNullableFilter<"team"> | string | null
    createdAt?: DateTimeFilter<"team"> | Date | string
    updatedAt?: DateTimeFilter<"team"> | Date | string
    team_creator_id?: StringFilter<"team"> | string
    creator?: XOR<UserRelationFilter, userWhereInput>
    player_list?: UserListRelationFilter
    coach_list?: UserListRelationFilter
    home_games?: GameListRelationFilter
    away_games?: GameListRelationFilter
    tournaments?: TournamentListRelationFilter
  }

  export type teamOrderByWithRelationInput = {
    id?: SortOrder
    team_name?: SortOrder
    team_avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_creator_id?: SortOrder
    creator?: userOrderByWithRelationInput
    player_list?: userOrderByRelationAggregateInput
    coach_list?: userOrderByRelationAggregateInput
    home_games?: gameOrderByRelationAggregateInput
    away_games?: gameOrderByRelationAggregateInput
    tournaments?: tournamentOrderByRelationAggregateInput
  }

  export type teamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    team_name?: string
    AND?: teamWhereInput | teamWhereInput[]
    OR?: teamWhereInput[]
    NOT?: teamWhereInput | teamWhereInput[]
    team_avatar?: StringNullableFilter<"team"> | string | null
    createdAt?: DateTimeFilter<"team"> | Date | string
    updatedAt?: DateTimeFilter<"team"> | Date | string
    team_creator_id?: StringFilter<"team"> | string
    creator?: XOR<UserRelationFilter, userWhereInput>
    player_list?: UserListRelationFilter
    coach_list?: UserListRelationFilter
    home_games?: GameListRelationFilter
    away_games?: GameListRelationFilter
    tournaments?: TournamentListRelationFilter
  }, "id" | "id" | "team_name">

  export type teamOrderByWithAggregationInput = {
    id?: SortOrder
    team_name?: SortOrder
    team_avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_creator_id?: SortOrder
    _count?: teamCountOrderByAggregateInput
    _max?: teamMaxOrderByAggregateInput
    _min?: teamMinOrderByAggregateInput
  }

  export type teamScalarWhereWithAggregatesInput = {
    AND?: teamScalarWhereWithAggregatesInput | teamScalarWhereWithAggregatesInput[]
    OR?: teamScalarWhereWithAggregatesInput[]
    NOT?: teamScalarWhereWithAggregatesInput | teamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"team"> | string
    team_name?: StringWithAggregatesFilter<"team"> | string
    team_avatar?: StringNullableWithAggregatesFilter<"team"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"team"> | Date | string
    team_creator_id?: StringWithAggregatesFilter<"team"> | string
  }

  export type gameWhereInput = {
    AND?: gameWhereInput | gameWhereInput[]
    OR?: gameWhereInput[]
    NOT?: gameWhereInput | gameWhereInput[]
    id?: StringFilter<"game"> | string
    game_date?: DateTimeFilter<"game"> | Date | string
    home_team_score?: IntNullableFilter<"game"> | number | null
    away_team_score?: IntNullableFilter<"game"> | number | null
    createdAt?: DateTimeFilter<"game"> | Date | string
    updatedAt?: DateTimeFilter<"game"> | Date | string
    home_team_id?: StringFilter<"game"> | string
    away_team_id?: StringFilter<"game"> | string
    tournament_id?: StringFilter<"game"> | string
    home_team?: XOR<TeamRelationFilter, teamWhereInput>
    away_team?: XOR<TeamRelationFilter, teamWhereInput>
    tournament?: XOR<TournamentNullableRelationFilter, tournamentWhereInput> | null
  }

  export type gameOrderByWithRelationInput = {
    id?: SortOrder
    game_date?: SortOrder
    home_team_score?: SortOrderInput | SortOrder
    away_team_score?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    home_team_id?: SortOrder
    away_team_id?: SortOrder
    tournament_id?: SortOrder
    home_team?: teamOrderByWithRelationInput
    away_team?: teamOrderByWithRelationInput
    tournament?: tournamentOrderByWithRelationInput
  }

  export type gameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: gameWhereInput | gameWhereInput[]
    OR?: gameWhereInput[]
    NOT?: gameWhereInput | gameWhereInput[]
    game_date?: DateTimeFilter<"game"> | Date | string
    home_team_score?: IntNullableFilter<"game"> | number | null
    away_team_score?: IntNullableFilter<"game"> | number | null
    createdAt?: DateTimeFilter<"game"> | Date | string
    updatedAt?: DateTimeFilter<"game"> | Date | string
    home_team_id?: StringFilter<"game"> | string
    away_team_id?: StringFilter<"game"> | string
    tournament_id?: StringFilter<"game"> | string
    home_team?: XOR<TeamRelationFilter, teamWhereInput>
    away_team?: XOR<TeamRelationFilter, teamWhereInput>
    tournament?: XOR<TournamentNullableRelationFilter, tournamentWhereInput> | null
  }, "id" | "id">

  export type gameOrderByWithAggregationInput = {
    id?: SortOrder
    game_date?: SortOrder
    home_team_score?: SortOrderInput | SortOrder
    away_team_score?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    home_team_id?: SortOrder
    away_team_id?: SortOrder
    tournament_id?: SortOrder
    _count?: gameCountOrderByAggregateInput
    _avg?: gameAvgOrderByAggregateInput
    _max?: gameMaxOrderByAggregateInput
    _min?: gameMinOrderByAggregateInput
    _sum?: gameSumOrderByAggregateInput
  }

  export type gameScalarWhereWithAggregatesInput = {
    AND?: gameScalarWhereWithAggregatesInput | gameScalarWhereWithAggregatesInput[]
    OR?: gameScalarWhereWithAggregatesInput[]
    NOT?: gameScalarWhereWithAggregatesInput | gameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"game"> | string
    game_date?: DateTimeWithAggregatesFilter<"game"> | Date | string
    home_team_score?: IntNullableWithAggregatesFilter<"game"> | number | null
    away_team_score?: IntNullableWithAggregatesFilter<"game"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"game"> | Date | string
    home_team_id?: StringWithAggregatesFilter<"game"> | string
    away_team_id?: StringWithAggregatesFilter<"game"> | string
    tournament_id?: StringWithAggregatesFilter<"game"> | string
  }

  export type tournamentWhereInput = {
    AND?: tournamentWhereInput | tournamentWhereInput[]
    OR?: tournamentWhereInput[]
    NOT?: tournamentWhereInput | tournamentWhereInput[]
    id?: StringFilter<"tournament"> | string
    tournament_name?: StringFilter<"tournament"> | string
    tournament_avatar?: StringNullableFilter<"tournament"> | string | null
    createdAt?: DateTimeFilter<"tournament"> | Date | string
    updatedAt?: DateTimeFilter<"tournament"> | Date | string
    team_list?: TeamListRelationFilter
    game_list?: GameListRelationFilter
  }

  export type tournamentOrderByWithRelationInput = {
    id?: SortOrder
    tournament_name?: SortOrder
    tournament_avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_list?: teamOrderByRelationAggregateInput
    game_list?: gameOrderByRelationAggregateInput
  }

  export type tournamentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: tournamentWhereInput | tournamentWhereInput[]
    OR?: tournamentWhereInput[]
    NOT?: tournamentWhereInput | tournamentWhereInput[]
    tournament_name?: StringFilter<"tournament"> | string
    tournament_avatar?: StringNullableFilter<"tournament"> | string | null
    createdAt?: DateTimeFilter<"tournament"> | Date | string
    updatedAt?: DateTimeFilter<"tournament"> | Date | string
    team_list?: TeamListRelationFilter
    game_list?: GameListRelationFilter
  }, "id" | "id">

  export type tournamentOrderByWithAggregationInput = {
    id?: SortOrder
    tournament_name?: SortOrder
    tournament_avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: tournamentCountOrderByAggregateInput
    _max?: tournamentMaxOrderByAggregateInput
    _min?: tournamentMinOrderByAggregateInput
  }

  export type tournamentScalarWhereWithAggregatesInput = {
    AND?: tournamentScalarWhereWithAggregatesInput | tournamentScalarWhereWithAggregatesInput[]
    OR?: tournamentScalarWhereWithAggregatesInput[]
    NOT?: tournamentScalarWhereWithAggregatesInput | tournamentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"tournament"> | string
    tournament_name?: StringWithAggregatesFilter<"tournament"> | string
    tournament_avatar?: StringNullableWithAggregatesFilter<"tournament"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"tournament"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"tournament"> | Date | string
  }

  export type userCreateInput = {
    id: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    created_teams?: teamCreateNestedManyWithoutCreatorInput
    teams?: teamCreateNestedManyWithoutPlayer_listInput
    coaching_teams?: teamCreateNestedManyWithoutCoach_listInput
  }

  export type userUncheckedCreateInput = {
    id: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    created_teams?: teamUncheckedCreateNestedManyWithoutCreatorInput
    teams?: teamUncheckedCreateNestedManyWithoutPlayer_listInput
    coaching_teams?: teamUncheckedCreateNestedManyWithoutCoach_listInput
  }

  export type userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_teams?: teamUpdateManyWithoutCreatorNestedInput
    teams?: teamUpdateManyWithoutPlayer_listNestedInput
    coaching_teams?: teamUpdateManyWithoutCoach_listNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_teams?: teamUncheckedUpdateManyWithoutCreatorNestedInput
    teams?: teamUncheckedUpdateManyWithoutPlayer_listNestedInput
    coaching_teams?: teamUncheckedUpdateManyWithoutCoach_listNestedInput
  }

  export type userCreateManyInput = {
    id: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type teamCreateInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: userCreateNestedOneWithoutCreated_teamsInput
    player_list?: userCreateNestedManyWithoutTeamsInput
    coach_list?: userCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameCreateNestedManyWithoutHome_teamInput
    away_games?: gameCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentCreateNestedManyWithoutTeam_listInput
  }

  export type teamUncheckedCreateInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_creator_id: string
    player_list?: userUncheckedCreateNestedManyWithoutTeamsInput
    coach_list?: userUncheckedCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: gameUncheckedCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentUncheckedCreateNestedManyWithoutTeam_listInput
  }

  export type teamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: userUpdateOneRequiredWithoutCreated_teamsNestedInput
    player_list?: userUpdateManyWithoutTeamsNestedInput
    coach_list?: userUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
    player_list?: userUncheckedUpdateManyWithoutTeamsNestedInput
    coach_list?: userUncheckedUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUncheckedUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUncheckedUpdateManyWithoutTeam_listNestedInput
  }

  export type teamCreateManyInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_creator_id: string
  }

  export type teamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type teamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
  }

  export type gameCreateInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    home_team: teamCreateNestedOneWithoutHome_gamesInput
    away_team: teamCreateNestedOneWithoutAway_gamesInput
    tournament?: tournamentCreateNestedOneWithoutGame_listInput
  }

  export type gameUncheckedCreateInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    home_team_id: string
    away_team_id: string
    tournament_id: string
  }

  export type gameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team?: teamUpdateOneRequiredWithoutHome_gamesNestedInput
    away_team?: teamUpdateOneRequiredWithoutAway_gamesNestedInput
    tournament?: tournamentUpdateOneWithoutGame_listNestedInput
  }

  export type gameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_id?: StringFieldUpdateOperationsInput | string
    away_team_id?: StringFieldUpdateOperationsInput | string
    tournament_id?: StringFieldUpdateOperationsInput | string
  }

  export type gameCreateManyInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    home_team_id: string
    away_team_id: string
    tournament_id: string
  }

  export type gameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_id?: StringFieldUpdateOperationsInput | string
    away_team_id?: StringFieldUpdateOperationsInput | string
    tournament_id?: StringFieldUpdateOperationsInput | string
  }

  export type tournamentCreateInput = {
    id: string
    tournament_name: string
    tournament_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_list?: teamCreateNestedManyWithoutTournamentsInput
    game_list?: gameCreateNestedManyWithoutTournamentInput
  }

  export type tournamentUncheckedCreateInput = {
    id: string
    tournament_name: string
    tournament_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_list?: teamUncheckedCreateNestedManyWithoutTournamentsInput
    game_list?: gameUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type tournamentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournament_name?: StringFieldUpdateOperationsInput | string
    tournament_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_list?: teamUpdateManyWithoutTournamentsNestedInput
    game_list?: gameUpdateManyWithoutTournamentNestedInput
  }

  export type tournamentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournament_name?: StringFieldUpdateOperationsInput | string
    tournament_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_list?: teamUncheckedUpdateManyWithoutTournamentsNestedInput
    game_list?: gameUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type tournamentCreateManyInput = {
    id: string
    tournament_name: string
    tournament_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type tournamentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournament_name?: StringFieldUpdateOperationsInput | string
    tournament_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tournamentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournament_name?: StringFieldUpdateOperationsInput | string
    tournament_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TeamListRelationFilter = {
    every?: teamWhereInput
    some?: teamWhereInput
    none?: teamWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type teamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type GameListRelationFilter = {
    every?: gameWhereInput
    some?: gameWhereInput
    none?: gameWhereInput
  }

  export type TournamentListRelationFilter = {
    every?: tournamentWhereInput
    some?: tournamentWhereInput
    none?: tournamentWhereInput
  }

  export type userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type gameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tournamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type teamCountOrderByAggregateInput = {
    id?: SortOrder
    team_name?: SortOrder
    team_avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_creator_id?: SortOrder
  }

  export type teamMaxOrderByAggregateInput = {
    id?: SortOrder
    team_name?: SortOrder
    team_avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_creator_id?: SortOrder
  }

  export type teamMinOrderByAggregateInput = {
    id?: SortOrder
    team_name?: SortOrder
    team_avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_creator_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TeamRelationFilter = {
    is?: teamWhereInput
    isNot?: teamWhereInput
  }

  export type TournamentNullableRelationFilter = {
    is?: tournamentWhereInput | null
    isNot?: tournamentWhereInput | null
  }

  export type gameCountOrderByAggregateInput = {
    id?: SortOrder
    game_date?: SortOrder
    home_team_score?: SortOrder
    away_team_score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    home_team_id?: SortOrder
    away_team_id?: SortOrder
    tournament_id?: SortOrder
  }

  export type gameAvgOrderByAggregateInput = {
    home_team_score?: SortOrder
    away_team_score?: SortOrder
  }

  export type gameMaxOrderByAggregateInput = {
    id?: SortOrder
    game_date?: SortOrder
    home_team_score?: SortOrder
    away_team_score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    home_team_id?: SortOrder
    away_team_id?: SortOrder
    tournament_id?: SortOrder
  }

  export type gameMinOrderByAggregateInput = {
    id?: SortOrder
    game_date?: SortOrder
    home_team_score?: SortOrder
    away_team_score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    home_team_id?: SortOrder
    away_team_id?: SortOrder
    tournament_id?: SortOrder
  }

  export type gameSumOrderByAggregateInput = {
    home_team_score?: SortOrder
    away_team_score?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type tournamentCountOrderByAggregateInput = {
    id?: SortOrder
    tournament_name?: SortOrder
    tournament_avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type tournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    tournament_name?: SortOrder
    tournament_avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type tournamentMinOrderByAggregateInput = {
    id?: SortOrder
    tournament_name?: SortOrder
    tournament_avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type teamCreateNestedManyWithoutCreatorInput = {
    create?: XOR<teamCreateWithoutCreatorInput, teamUncheckedCreateWithoutCreatorInput> | teamCreateWithoutCreatorInput[] | teamUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: teamCreateOrConnectWithoutCreatorInput | teamCreateOrConnectWithoutCreatorInput[]
    createMany?: teamCreateManyCreatorInputEnvelope
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
  }

  export type teamCreateNestedManyWithoutPlayer_listInput = {
    create?: XOR<teamCreateWithoutPlayer_listInput, teamUncheckedCreateWithoutPlayer_listInput> | teamCreateWithoutPlayer_listInput[] | teamUncheckedCreateWithoutPlayer_listInput[]
    connectOrCreate?: teamCreateOrConnectWithoutPlayer_listInput | teamCreateOrConnectWithoutPlayer_listInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
  }

  export type teamCreateNestedManyWithoutCoach_listInput = {
    create?: XOR<teamCreateWithoutCoach_listInput, teamUncheckedCreateWithoutCoach_listInput> | teamCreateWithoutCoach_listInput[] | teamUncheckedCreateWithoutCoach_listInput[]
    connectOrCreate?: teamCreateOrConnectWithoutCoach_listInput | teamCreateOrConnectWithoutCoach_listInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
  }

  export type teamUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<teamCreateWithoutCreatorInput, teamUncheckedCreateWithoutCreatorInput> | teamCreateWithoutCreatorInput[] | teamUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: teamCreateOrConnectWithoutCreatorInput | teamCreateOrConnectWithoutCreatorInput[]
    createMany?: teamCreateManyCreatorInputEnvelope
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
  }

  export type teamUncheckedCreateNestedManyWithoutPlayer_listInput = {
    create?: XOR<teamCreateWithoutPlayer_listInput, teamUncheckedCreateWithoutPlayer_listInput> | teamCreateWithoutPlayer_listInput[] | teamUncheckedCreateWithoutPlayer_listInput[]
    connectOrCreate?: teamCreateOrConnectWithoutPlayer_listInput | teamCreateOrConnectWithoutPlayer_listInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
  }

  export type teamUncheckedCreateNestedManyWithoutCoach_listInput = {
    create?: XOR<teamCreateWithoutCoach_listInput, teamUncheckedCreateWithoutCoach_listInput> | teamCreateWithoutCoach_listInput[] | teamUncheckedCreateWithoutCoach_listInput[]
    connectOrCreate?: teamCreateOrConnectWithoutCoach_listInput | teamCreateOrConnectWithoutCoach_listInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type teamUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<teamCreateWithoutCreatorInput, teamUncheckedCreateWithoutCreatorInput> | teamCreateWithoutCreatorInput[] | teamUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: teamCreateOrConnectWithoutCreatorInput | teamCreateOrConnectWithoutCreatorInput[]
    upsert?: teamUpsertWithWhereUniqueWithoutCreatorInput | teamUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: teamCreateManyCreatorInputEnvelope
    set?: teamWhereUniqueInput | teamWhereUniqueInput[]
    disconnect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    delete?: teamWhereUniqueInput | teamWhereUniqueInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    update?: teamUpdateWithWhereUniqueWithoutCreatorInput | teamUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: teamUpdateManyWithWhereWithoutCreatorInput | teamUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: teamScalarWhereInput | teamScalarWhereInput[]
  }

  export type teamUpdateManyWithoutPlayer_listNestedInput = {
    create?: XOR<teamCreateWithoutPlayer_listInput, teamUncheckedCreateWithoutPlayer_listInput> | teamCreateWithoutPlayer_listInput[] | teamUncheckedCreateWithoutPlayer_listInput[]
    connectOrCreate?: teamCreateOrConnectWithoutPlayer_listInput | teamCreateOrConnectWithoutPlayer_listInput[]
    upsert?: teamUpsertWithWhereUniqueWithoutPlayer_listInput | teamUpsertWithWhereUniqueWithoutPlayer_listInput[]
    set?: teamWhereUniqueInput | teamWhereUniqueInput[]
    disconnect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    delete?: teamWhereUniqueInput | teamWhereUniqueInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    update?: teamUpdateWithWhereUniqueWithoutPlayer_listInput | teamUpdateWithWhereUniqueWithoutPlayer_listInput[]
    updateMany?: teamUpdateManyWithWhereWithoutPlayer_listInput | teamUpdateManyWithWhereWithoutPlayer_listInput[]
    deleteMany?: teamScalarWhereInput | teamScalarWhereInput[]
  }

  export type teamUpdateManyWithoutCoach_listNestedInput = {
    create?: XOR<teamCreateWithoutCoach_listInput, teamUncheckedCreateWithoutCoach_listInput> | teamCreateWithoutCoach_listInput[] | teamUncheckedCreateWithoutCoach_listInput[]
    connectOrCreate?: teamCreateOrConnectWithoutCoach_listInput | teamCreateOrConnectWithoutCoach_listInput[]
    upsert?: teamUpsertWithWhereUniqueWithoutCoach_listInput | teamUpsertWithWhereUniqueWithoutCoach_listInput[]
    set?: teamWhereUniqueInput | teamWhereUniqueInput[]
    disconnect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    delete?: teamWhereUniqueInput | teamWhereUniqueInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    update?: teamUpdateWithWhereUniqueWithoutCoach_listInput | teamUpdateWithWhereUniqueWithoutCoach_listInput[]
    updateMany?: teamUpdateManyWithWhereWithoutCoach_listInput | teamUpdateManyWithWhereWithoutCoach_listInput[]
    deleteMany?: teamScalarWhereInput | teamScalarWhereInput[]
  }

  export type teamUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<teamCreateWithoutCreatorInput, teamUncheckedCreateWithoutCreatorInput> | teamCreateWithoutCreatorInput[] | teamUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: teamCreateOrConnectWithoutCreatorInput | teamCreateOrConnectWithoutCreatorInput[]
    upsert?: teamUpsertWithWhereUniqueWithoutCreatorInput | teamUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: teamCreateManyCreatorInputEnvelope
    set?: teamWhereUniqueInput | teamWhereUniqueInput[]
    disconnect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    delete?: teamWhereUniqueInput | teamWhereUniqueInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    update?: teamUpdateWithWhereUniqueWithoutCreatorInput | teamUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: teamUpdateManyWithWhereWithoutCreatorInput | teamUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: teamScalarWhereInput | teamScalarWhereInput[]
  }

  export type teamUncheckedUpdateManyWithoutPlayer_listNestedInput = {
    create?: XOR<teamCreateWithoutPlayer_listInput, teamUncheckedCreateWithoutPlayer_listInput> | teamCreateWithoutPlayer_listInput[] | teamUncheckedCreateWithoutPlayer_listInput[]
    connectOrCreate?: teamCreateOrConnectWithoutPlayer_listInput | teamCreateOrConnectWithoutPlayer_listInput[]
    upsert?: teamUpsertWithWhereUniqueWithoutPlayer_listInput | teamUpsertWithWhereUniqueWithoutPlayer_listInput[]
    set?: teamWhereUniqueInput | teamWhereUniqueInput[]
    disconnect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    delete?: teamWhereUniqueInput | teamWhereUniqueInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    update?: teamUpdateWithWhereUniqueWithoutPlayer_listInput | teamUpdateWithWhereUniqueWithoutPlayer_listInput[]
    updateMany?: teamUpdateManyWithWhereWithoutPlayer_listInput | teamUpdateManyWithWhereWithoutPlayer_listInput[]
    deleteMany?: teamScalarWhereInput | teamScalarWhereInput[]
  }

  export type teamUncheckedUpdateManyWithoutCoach_listNestedInput = {
    create?: XOR<teamCreateWithoutCoach_listInput, teamUncheckedCreateWithoutCoach_listInput> | teamCreateWithoutCoach_listInput[] | teamUncheckedCreateWithoutCoach_listInput[]
    connectOrCreate?: teamCreateOrConnectWithoutCoach_listInput | teamCreateOrConnectWithoutCoach_listInput[]
    upsert?: teamUpsertWithWhereUniqueWithoutCoach_listInput | teamUpsertWithWhereUniqueWithoutCoach_listInput[]
    set?: teamWhereUniqueInput | teamWhereUniqueInput[]
    disconnect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    delete?: teamWhereUniqueInput | teamWhereUniqueInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    update?: teamUpdateWithWhereUniqueWithoutCoach_listInput | teamUpdateWithWhereUniqueWithoutCoach_listInput[]
    updateMany?: teamUpdateManyWithWhereWithoutCoach_listInput | teamUpdateManyWithWhereWithoutCoach_listInput[]
    deleteMany?: teamScalarWhereInput | teamScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutCreated_teamsInput = {
    create?: XOR<userCreateWithoutCreated_teamsInput, userUncheckedCreateWithoutCreated_teamsInput>
    connectOrCreate?: userCreateOrConnectWithoutCreated_teamsInput
    connect?: userWhereUniqueInput
  }

  export type userCreateNestedManyWithoutTeamsInput = {
    create?: XOR<userCreateWithoutTeamsInput, userUncheckedCreateWithoutTeamsInput> | userCreateWithoutTeamsInput[] | userUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: userCreateOrConnectWithoutTeamsInput | userCreateOrConnectWithoutTeamsInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type userCreateNestedManyWithoutCoaching_teamsInput = {
    create?: XOR<userCreateWithoutCoaching_teamsInput, userUncheckedCreateWithoutCoaching_teamsInput> | userCreateWithoutCoaching_teamsInput[] | userUncheckedCreateWithoutCoaching_teamsInput[]
    connectOrCreate?: userCreateOrConnectWithoutCoaching_teamsInput | userCreateOrConnectWithoutCoaching_teamsInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type gameCreateNestedManyWithoutHome_teamInput = {
    create?: XOR<gameCreateWithoutHome_teamInput, gameUncheckedCreateWithoutHome_teamInput> | gameCreateWithoutHome_teamInput[] | gameUncheckedCreateWithoutHome_teamInput[]
    connectOrCreate?: gameCreateOrConnectWithoutHome_teamInput | gameCreateOrConnectWithoutHome_teamInput[]
    createMany?: gameCreateManyHome_teamInputEnvelope
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
  }

  export type gameCreateNestedManyWithoutAway_teamInput = {
    create?: XOR<gameCreateWithoutAway_teamInput, gameUncheckedCreateWithoutAway_teamInput> | gameCreateWithoutAway_teamInput[] | gameUncheckedCreateWithoutAway_teamInput[]
    connectOrCreate?: gameCreateOrConnectWithoutAway_teamInput | gameCreateOrConnectWithoutAway_teamInput[]
    createMany?: gameCreateManyAway_teamInputEnvelope
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
  }

  export type tournamentCreateNestedManyWithoutTeam_listInput = {
    create?: XOR<tournamentCreateWithoutTeam_listInput, tournamentUncheckedCreateWithoutTeam_listInput> | tournamentCreateWithoutTeam_listInput[] | tournamentUncheckedCreateWithoutTeam_listInput[]
    connectOrCreate?: tournamentCreateOrConnectWithoutTeam_listInput | tournamentCreateOrConnectWithoutTeam_listInput[]
    connect?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
  }

  export type userUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<userCreateWithoutTeamsInput, userUncheckedCreateWithoutTeamsInput> | userCreateWithoutTeamsInput[] | userUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: userCreateOrConnectWithoutTeamsInput | userCreateOrConnectWithoutTeamsInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type userUncheckedCreateNestedManyWithoutCoaching_teamsInput = {
    create?: XOR<userCreateWithoutCoaching_teamsInput, userUncheckedCreateWithoutCoaching_teamsInput> | userCreateWithoutCoaching_teamsInput[] | userUncheckedCreateWithoutCoaching_teamsInput[]
    connectOrCreate?: userCreateOrConnectWithoutCoaching_teamsInput | userCreateOrConnectWithoutCoaching_teamsInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type gameUncheckedCreateNestedManyWithoutHome_teamInput = {
    create?: XOR<gameCreateWithoutHome_teamInput, gameUncheckedCreateWithoutHome_teamInput> | gameCreateWithoutHome_teamInput[] | gameUncheckedCreateWithoutHome_teamInput[]
    connectOrCreate?: gameCreateOrConnectWithoutHome_teamInput | gameCreateOrConnectWithoutHome_teamInput[]
    createMany?: gameCreateManyHome_teamInputEnvelope
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
  }

  export type gameUncheckedCreateNestedManyWithoutAway_teamInput = {
    create?: XOR<gameCreateWithoutAway_teamInput, gameUncheckedCreateWithoutAway_teamInput> | gameCreateWithoutAway_teamInput[] | gameUncheckedCreateWithoutAway_teamInput[]
    connectOrCreate?: gameCreateOrConnectWithoutAway_teamInput | gameCreateOrConnectWithoutAway_teamInput[]
    createMany?: gameCreateManyAway_teamInputEnvelope
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
  }

  export type tournamentUncheckedCreateNestedManyWithoutTeam_listInput = {
    create?: XOR<tournamentCreateWithoutTeam_listInput, tournamentUncheckedCreateWithoutTeam_listInput> | tournamentCreateWithoutTeam_listInput[] | tournamentUncheckedCreateWithoutTeam_listInput[]
    connectOrCreate?: tournamentCreateOrConnectWithoutTeam_listInput | tournamentCreateOrConnectWithoutTeam_listInput[]
    connect?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
  }

  export type userUpdateOneRequiredWithoutCreated_teamsNestedInput = {
    create?: XOR<userCreateWithoutCreated_teamsInput, userUncheckedCreateWithoutCreated_teamsInput>
    connectOrCreate?: userCreateOrConnectWithoutCreated_teamsInput
    upsert?: userUpsertWithoutCreated_teamsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutCreated_teamsInput, userUpdateWithoutCreated_teamsInput>, userUncheckedUpdateWithoutCreated_teamsInput>
  }

  export type userUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<userCreateWithoutTeamsInput, userUncheckedCreateWithoutTeamsInput> | userCreateWithoutTeamsInput[] | userUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: userCreateOrConnectWithoutTeamsInput | userCreateOrConnectWithoutTeamsInput[]
    upsert?: userUpsertWithWhereUniqueWithoutTeamsInput | userUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutTeamsInput | userUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: userUpdateManyWithWhereWithoutTeamsInput | userUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type userUpdateManyWithoutCoaching_teamsNestedInput = {
    create?: XOR<userCreateWithoutCoaching_teamsInput, userUncheckedCreateWithoutCoaching_teamsInput> | userCreateWithoutCoaching_teamsInput[] | userUncheckedCreateWithoutCoaching_teamsInput[]
    connectOrCreate?: userCreateOrConnectWithoutCoaching_teamsInput | userCreateOrConnectWithoutCoaching_teamsInput[]
    upsert?: userUpsertWithWhereUniqueWithoutCoaching_teamsInput | userUpsertWithWhereUniqueWithoutCoaching_teamsInput[]
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutCoaching_teamsInput | userUpdateWithWhereUniqueWithoutCoaching_teamsInput[]
    updateMany?: userUpdateManyWithWhereWithoutCoaching_teamsInput | userUpdateManyWithWhereWithoutCoaching_teamsInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type gameUpdateManyWithoutHome_teamNestedInput = {
    create?: XOR<gameCreateWithoutHome_teamInput, gameUncheckedCreateWithoutHome_teamInput> | gameCreateWithoutHome_teamInput[] | gameUncheckedCreateWithoutHome_teamInput[]
    connectOrCreate?: gameCreateOrConnectWithoutHome_teamInput | gameCreateOrConnectWithoutHome_teamInput[]
    upsert?: gameUpsertWithWhereUniqueWithoutHome_teamInput | gameUpsertWithWhereUniqueWithoutHome_teamInput[]
    createMany?: gameCreateManyHome_teamInputEnvelope
    set?: gameWhereUniqueInput | gameWhereUniqueInput[]
    disconnect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    delete?: gameWhereUniqueInput | gameWhereUniqueInput[]
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    update?: gameUpdateWithWhereUniqueWithoutHome_teamInput | gameUpdateWithWhereUniqueWithoutHome_teamInput[]
    updateMany?: gameUpdateManyWithWhereWithoutHome_teamInput | gameUpdateManyWithWhereWithoutHome_teamInput[]
    deleteMany?: gameScalarWhereInput | gameScalarWhereInput[]
  }

  export type gameUpdateManyWithoutAway_teamNestedInput = {
    create?: XOR<gameCreateWithoutAway_teamInput, gameUncheckedCreateWithoutAway_teamInput> | gameCreateWithoutAway_teamInput[] | gameUncheckedCreateWithoutAway_teamInput[]
    connectOrCreate?: gameCreateOrConnectWithoutAway_teamInput | gameCreateOrConnectWithoutAway_teamInput[]
    upsert?: gameUpsertWithWhereUniqueWithoutAway_teamInput | gameUpsertWithWhereUniqueWithoutAway_teamInput[]
    createMany?: gameCreateManyAway_teamInputEnvelope
    set?: gameWhereUniqueInput | gameWhereUniqueInput[]
    disconnect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    delete?: gameWhereUniqueInput | gameWhereUniqueInput[]
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    update?: gameUpdateWithWhereUniqueWithoutAway_teamInput | gameUpdateWithWhereUniqueWithoutAway_teamInput[]
    updateMany?: gameUpdateManyWithWhereWithoutAway_teamInput | gameUpdateManyWithWhereWithoutAway_teamInput[]
    deleteMany?: gameScalarWhereInput | gameScalarWhereInput[]
  }

  export type tournamentUpdateManyWithoutTeam_listNestedInput = {
    create?: XOR<tournamentCreateWithoutTeam_listInput, tournamentUncheckedCreateWithoutTeam_listInput> | tournamentCreateWithoutTeam_listInput[] | tournamentUncheckedCreateWithoutTeam_listInput[]
    connectOrCreate?: tournamentCreateOrConnectWithoutTeam_listInput | tournamentCreateOrConnectWithoutTeam_listInput[]
    upsert?: tournamentUpsertWithWhereUniqueWithoutTeam_listInput | tournamentUpsertWithWhereUniqueWithoutTeam_listInput[]
    set?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
    disconnect?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
    delete?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
    connect?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
    update?: tournamentUpdateWithWhereUniqueWithoutTeam_listInput | tournamentUpdateWithWhereUniqueWithoutTeam_listInput[]
    updateMany?: tournamentUpdateManyWithWhereWithoutTeam_listInput | tournamentUpdateManyWithWhereWithoutTeam_listInput[]
    deleteMany?: tournamentScalarWhereInput | tournamentScalarWhereInput[]
  }

  export type userUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<userCreateWithoutTeamsInput, userUncheckedCreateWithoutTeamsInput> | userCreateWithoutTeamsInput[] | userUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: userCreateOrConnectWithoutTeamsInput | userCreateOrConnectWithoutTeamsInput[]
    upsert?: userUpsertWithWhereUniqueWithoutTeamsInput | userUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutTeamsInput | userUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: userUpdateManyWithWhereWithoutTeamsInput | userUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type userUncheckedUpdateManyWithoutCoaching_teamsNestedInput = {
    create?: XOR<userCreateWithoutCoaching_teamsInput, userUncheckedCreateWithoutCoaching_teamsInput> | userCreateWithoutCoaching_teamsInput[] | userUncheckedCreateWithoutCoaching_teamsInput[]
    connectOrCreate?: userCreateOrConnectWithoutCoaching_teamsInput | userCreateOrConnectWithoutCoaching_teamsInput[]
    upsert?: userUpsertWithWhereUniqueWithoutCoaching_teamsInput | userUpsertWithWhereUniqueWithoutCoaching_teamsInput[]
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutCoaching_teamsInput | userUpdateWithWhereUniqueWithoutCoaching_teamsInput[]
    updateMany?: userUpdateManyWithWhereWithoutCoaching_teamsInput | userUpdateManyWithWhereWithoutCoaching_teamsInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type gameUncheckedUpdateManyWithoutHome_teamNestedInput = {
    create?: XOR<gameCreateWithoutHome_teamInput, gameUncheckedCreateWithoutHome_teamInput> | gameCreateWithoutHome_teamInput[] | gameUncheckedCreateWithoutHome_teamInput[]
    connectOrCreate?: gameCreateOrConnectWithoutHome_teamInput | gameCreateOrConnectWithoutHome_teamInput[]
    upsert?: gameUpsertWithWhereUniqueWithoutHome_teamInput | gameUpsertWithWhereUniqueWithoutHome_teamInput[]
    createMany?: gameCreateManyHome_teamInputEnvelope
    set?: gameWhereUniqueInput | gameWhereUniqueInput[]
    disconnect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    delete?: gameWhereUniqueInput | gameWhereUniqueInput[]
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    update?: gameUpdateWithWhereUniqueWithoutHome_teamInput | gameUpdateWithWhereUniqueWithoutHome_teamInput[]
    updateMany?: gameUpdateManyWithWhereWithoutHome_teamInput | gameUpdateManyWithWhereWithoutHome_teamInput[]
    deleteMany?: gameScalarWhereInput | gameScalarWhereInput[]
  }

  export type gameUncheckedUpdateManyWithoutAway_teamNestedInput = {
    create?: XOR<gameCreateWithoutAway_teamInput, gameUncheckedCreateWithoutAway_teamInput> | gameCreateWithoutAway_teamInput[] | gameUncheckedCreateWithoutAway_teamInput[]
    connectOrCreate?: gameCreateOrConnectWithoutAway_teamInput | gameCreateOrConnectWithoutAway_teamInput[]
    upsert?: gameUpsertWithWhereUniqueWithoutAway_teamInput | gameUpsertWithWhereUniqueWithoutAway_teamInput[]
    createMany?: gameCreateManyAway_teamInputEnvelope
    set?: gameWhereUniqueInput | gameWhereUniqueInput[]
    disconnect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    delete?: gameWhereUniqueInput | gameWhereUniqueInput[]
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    update?: gameUpdateWithWhereUniqueWithoutAway_teamInput | gameUpdateWithWhereUniqueWithoutAway_teamInput[]
    updateMany?: gameUpdateManyWithWhereWithoutAway_teamInput | gameUpdateManyWithWhereWithoutAway_teamInput[]
    deleteMany?: gameScalarWhereInput | gameScalarWhereInput[]
  }

  export type tournamentUncheckedUpdateManyWithoutTeam_listNestedInput = {
    create?: XOR<tournamentCreateWithoutTeam_listInput, tournamentUncheckedCreateWithoutTeam_listInput> | tournamentCreateWithoutTeam_listInput[] | tournamentUncheckedCreateWithoutTeam_listInput[]
    connectOrCreate?: tournamentCreateOrConnectWithoutTeam_listInput | tournamentCreateOrConnectWithoutTeam_listInput[]
    upsert?: tournamentUpsertWithWhereUniqueWithoutTeam_listInput | tournamentUpsertWithWhereUniqueWithoutTeam_listInput[]
    set?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
    disconnect?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
    delete?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
    connect?: tournamentWhereUniqueInput | tournamentWhereUniqueInput[]
    update?: tournamentUpdateWithWhereUniqueWithoutTeam_listInput | tournamentUpdateWithWhereUniqueWithoutTeam_listInput[]
    updateMany?: tournamentUpdateManyWithWhereWithoutTeam_listInput | tournamentUpdateManyWithWhereWithoutTeam_listInput[]
    deleteMany?: tournamentScalarWhereInput | tournamentScalarWhereInput[]
  }

  export type teamCreateNestedOneWithoutHome_gamesInput = {
    create?: XOR<teamCreateWithoutHome_gamesInput, teamUncheckedCreateWithoutHome_gamesInput>
    connectOrCreate?: teamCreateOrConnectWithoutHome_gamesInput
    connect?: teamWhereUniqueInput
  }

  export type teamCreateNestedOneWithoutAway_gamesInput = {
    create?: XOR<teamCreateWithoutAway_gamesInput, teamUncheckedCreateWithoutAway_gamesInput>
    connectOrCreate?: teamCreateOrConnectWithoutAway_gamesInput
    connect?: teamWhereUniqueInput
  }

  export type tournamentCreateNestedOneWithoutGame_listInput = {
    create?: XOR<tournamentCreateWithoutGame_listInput, tournamentUncheckedCreateWithoutGame_listInput>
    connectOrCreate?: tournamentCreateOrConnectWithoutGame_listInput
    connect?: tournamentWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type teamUpdateOneRequiredWithoutHome_gamesNestedInput = {
    create?: XOR<teamCreateWithoutHome_gamesInput, teamUncheckedCreateWithoutHome_gamesInput>
    connectOrCreate?: teamCreateOrConnectWithoutHome_gamesInput
    upsert?: teamUpsertWithoutHome_gamesInput
    connect?: teamWhereUniqueInput
    update?: XOR<XOR<teamUpdateToOneWithWhereWithoutHome_gamesInput, teamUpdateWithoutHome_gamesInput>, teamUncheckedUpdateWithoutHome_gamesInput>
  }

  export type teamUpdateOneRequiredWithoutAway_gamesNestedInput = {
    create?: XOR<teamCreateWithoutAway_gamesInput, teamUncheckedCreateWithoutAway_gamesInput>
    connectOrCreate?: teamCreateOrConnectWithoutAway_gamesInput
    upsert?: teamUpsertWithoutAway_gamesInput
    connect?: teamWhereUniqueInput
    update?: XOR<XOR<teamUpdateToOneWithWhereWithoutAway_gamesInput, teamUpdateWithoutAway_gamesInput>, teamUncheckedUpdateWithoutAway_gamesInput>
  }

  export type tournamentUpdateOneWithoutGame_listNestedInput = {
    create?: XOR<tournamentCreateWithoutGame_listInput, tournamentUncheckedCreateWithoutGame_listInput>
    connectOrCreate?: tournamentCreateOrConnectWithoutGame_listInput
    upsert?: tournamentUpsertWithoutGame_listInput
    disconnect?: tournamentWhereInput | boolean
    delete?: tournamentWhereInput | boolean
    connect?: tournamentWhereUniqueInput
    update?: XOR<XOR<tournamentUpdateToOneWithWhereWithoutGame_listInput, tournamentUpdateWithoutGame_listInput>, tournamentUncheckedUpdateWithoutGame_listInput>
  }

  export type teamCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<teamCreateWithoutTournamentsInput, teamUncheckedCreateWithoutTournamentsInput> | teamCreateWithoutTournamentsInput[] | teamUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: teamCreateOrConnectWithoutTournamentsInput | teamCreateOrConnectWithoutTournamentsInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
  }

  export type gameCreateNestedManyWithoutTournamentInput = {
    create?: XOR<gameCreateWithoutTournamentInput, gameUncheckedCreateWithoutTournamentInput> | gameCreateWithoutTournamentInput[] | gameUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: gameCreateOrConnectWithoutTournamentInput | gameCreateOrConnectWithoutTournamentInput[]
    createMany?: gameCreateManyTournamentInputEnvelope
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
  }

  export type teamUncheckedCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<teamCreateWithoutTournamentsInput, teamUncheckedCreateWithoutTournamentsInput> | teamCreateWithoutTournamentsInput[] | teamUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: teamCreateOrConnectWithoutTournamentsInput | teamCreateOrConnectWithoutTournamentsInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
  }

  export type gameUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<gameCreateWithoutTournamentInput, gameUncheckedCreateWithoutTournamentInput> | gameCreateWithoutTournamentInput[] | gameUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: gameCreateOrConnectWithoutTournamentInput | gameCreateOrConnectWithoutTournamentInput[]
    createMany?: gameCreateManyTournamentInputEnvelope
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
  }

  export type teamUpdateManyWithoutTournamentsNestedInput = {
    create?: XOR<teamCreateWithoutTournamentsInput, teamUncheckedCreateWithoutTournamentsInput> | teamCreateWithoutTournamentsInput[] | teamUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: teamCreateOrConnectWithoutTournamentsInput | teamCreateOrConnectWithoutTournamentsInput[]
    upsert?: teamUpsertWithWhereUniqueWithoutTournamentsInput | teamUpsertWithWhereUniqueWithoutTournamentsInput[]
    set?: teamWhereUniqueInput | teamWhereUniqueInput[]
    disconnect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    delete?: teamWhereUniqueInput | teamWhereUniqueInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    update?: teamUpdateWithWhereUniqueWithoutTournamentsInput | teamUpdateWithWhereUniqueWithoutTournamentsInput[]
    updateMany?: teamUpdateManyWithWhereWithoutTournamentsInput | teamUpdateManyWithWhereWithoutTournamentsInput[]
    deleteMany?: teamScalarWhereInput | teamScalarWhereInput[]
  }

  export type gameUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<gameCreateWithoutTournamentInput, gameUncheckedCreateWithoutTournamentInput> | gameCreateWithoutTournamentInput[] | gameUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: gameCreateOrConnectWithoutTournamentInput | gameCreateOrConnectWithoutTournamentInput[]
    upsert?: gameUpsertWithWhereUniqueWithoutTournamentInput | gameUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: gameCreateManyTournamentInputEnvelope
    set?: gameWhereUniqueInput | gameWhereUniqueInput[]
    disconnect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    delete?: gameWhereUniqueInput | gameWhereUniqueInput[]
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    update?: gameUpdateWithWhereUniqueWithoutTournamentInput | gameUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: gameUpdateManyWithWhereWithoutTournamentInput | gameUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: gameScalarWhereInput | gameScalarWhereInput[]
  }

  export type teamUncheckedUpdateManyWithoutTournamentsNestedInput = {
    create?: XOR<teamCreateWithoutTournamentsInput, teamUncheckedCreateWithoutTournamentsInput> | teamCreateWithoutTournamentsInput[] | teamUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: teamCreateOrConnectWithoutTournamentsInput | teamCreateOrConnectWithoutTournamentsInput[]
    upsert?: teamUpsertWithWhereUniqueWithoutTournamentsInput | teamUpsertWithWhereUniqueWithoutTournamentsInput[]
    set?: teamWhereUniqueInput | teamWhereUniqueInput[]
    disconnect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    delete?: teamWhereUniqueInput | teamWhereUniqueInput[]
    connect?: teamWhereUniqueInput | teamWhereUniqueInput[]
    update?: teamUpdateWithWhereUniqueWithoutTournamentsInput | teamUpdateWithWhereUniqueWithoutTournamentsInput[]
    updateMany?: teamUpdateManyWithWhereWithoutTournamentsInput | teamUpdateManyWithWhereWithoutTournamentsInput[]
    deleteMany?: teamScalarWhereInput | teamScalarWhereInput[]
  }

  export type gameUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<gameCreateWithoutTournamentInput, gameUncheckedCreateWithoutTournamentInput> | gameCreateWithoutTournamentInput[] | gameUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: gameCreateOrConnectWithoutTournamentInput | gameCreateOrConnectWithoutTournamentInput[]
    upsert?: gameUpsertWithWhereUniqueWithoutTournamentInput | gameUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: gameCreateManyTournamentInputEnvelope
    set?: gameWhereUniqueInput | gameWhereUniqueInput[]
    disconnect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    delete?: gameWhereUniqueInput | gameWhereUniqueInput[]
    connect?: gameWhereUniqueInput | gameWhereUniqueInput[]
    update?: gameUpdateWithWhereUniqueWithoutTournamentInput | gameUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: gameUpdateManyWithWhereWithoutTournamentInput | gameUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: gameScalarWhereInput | gameScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type teamCreateWithoutCreatorInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    player_list?: userCreateNestedManyWithoutTeamsInput
    coach_list?: userCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameCreateNestedManyWithoutHome_teamInput
    away_games?: gameCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentCreateNestedManyWithoutTeam_listInput
  }

  export type teamUncheckedCreateWithoutCreatorInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    player_list?: userUncheckedCreateNestedManyWithoutTeamsInput
    coach_list?: userUncheckedCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: gameUncheckedCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentUncheckedCreateNestedManyWithoutTeam_listInput
  }

  export type teamCreateOrConnectWithoutCreatorInput = {
    where: teamWhereUniqueInput
    create: XOR<teamCreateWithoutCreatorInput, teamUncheckedCreateWithoutCreatorInput>
  }

  export type teamCreateManyCreatorInputEnvelope = {
    data: teamCreateManyCreatorInput | teamCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type teamCreateWithoutPlayer_listInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: userCreateNestedOneWithoutCreated_teamsInput
    coach_list?: userCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameCreateNestedManyWithoutHome_teamInput
    away_games?: gameCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentCreateNestedManyWithoutTeam_listInput
  }

  export type teamUncheckedCreateWithoutPlayer_listInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_creator_id: string
    coach_list?: userUncheckedCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: gameUncheckedCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentUncheckedCreateNestedManyWithoutTeam_listInput
  }

  export type teamCreateOrConnectWithoutPlayer_listInput = {
    where: teamWhereUniqueInput
    create: XOR<teamCreateWithoutPlayer_listInput, teamUncheckedCreateWithoutPlayer_listInput>
  }

  export type teamCreateWithoutCoach_listInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: userCreateNestedOneWithoutCreated_teamsInput
    player_list?: userCreateNestedManyWithoutTeamsInput
    home_games?: gameCreateNestedManyWithoutHome_teamInput
    away_games?: gameCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentCreateNestedManyWithoutTeam_listInput
  }

  export type teamUncheckedCreateWithoutCoach_listInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_creator_id: string
    player_list?: userUncheckedCreateNestedManyWithoutTeamsInput
    home_games?: gameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: gameUncheckedCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentUncheckedCreateNestedManyWithoutTeam_listInput
  }

  export type teamCreateOrConnectWithoutCoach_listInput = {
    where: teamWhereUniqueInput
    create: XOR<teamCreateWithoutCoach_listInput, teamUncheckedCreateWithoutCoach_listInput>
  }

  export type teamUpsertWithWhereUniqueWithoutCreatorInput = {
    where: teamWhereUniqueInput
    update: XOR<teamUpdateWithoutCreatorInput, teamUncheckedUpdateWithoutCreatorInput>
    create: XOR<teamCreateWithoutCreatorInput, teamUncheckedCreateWithoutCreatorInput>
  }

  export type teamUpdateWithWhereUniqueWithoutCreatorInput = {
    where: teamWhereUniqueInput
    data: XOR<teamUpdateWithoutCreatorInput, teamUncheckedUpdateWithoutCreatorInput>
  }

  export type teamUpdateManyWithWhereWithoutCreatorInput = {
    where: teamScalarWhereInput
    data: XOR<teamUpdateManyMutationInput, teamUncheckedUpdateManyWithoutCreatorInput>
  }

  export type teamScalarWhereInput = {
    AND?: teamScalarWhereInput | teamScalarWhereInput[]
    OR?: teamScalarWhereInput[]
    NOT?: teamScalarWhereInput | teamScalarWhereInput[]
    id?: StringFilter<"team"> | string
    team_name?: StringFilter<"team"> | string
    team_avatar?: StringNullableFilter<"team"> | string | null
    createdAt?: DateTimeFilter<"team"> | Date | string
    updatedAt?: DateTimeFilter<"team"> | Date | string
    team_creator_id?: StringFilter<"team"> | string
  }

  export type teamUpsertWithWhereUniqueWithoutPlayer_listInput = {
    where: teamWhereUniqueInput
    update: XOR<teamUpdateWithoutPlayer_listInput, teamUncheckedUpdateWithoutPlayer_listInput>
    create: XOR<teamCreateWithoutPlayer_listInput, teamUncheckedCreateWithoutPlayer_listInput>
  }

  export type teamUpdateWithWhereUniqueWithoutPlayer_listInput = {
    where: teamWhereUniqueInput
    data: XOR<teamUpdateWithoutPlayer_listInput, teamUncheckedUpdateWithoutPlayer_listInput>
  }

  export type teamUpdateManyWithWhereWithoutPlayer_listInput = {
    where: teamScalarWhereInput
    data: XOR<teamUpdateManyMutationInput, teamUncheckedUpdateManyWithoutPlayer_listInput>
  }

  export type teamUpsertWithWhereUniqueWithoutCoach_listInput = {
    where: teamWhereUniqueInput
    update: XOR<teamUpdateWithoutCoach_listInput, teamUncheckedUpdateWithoutCoach_listInput>
    create: XOR<teamCreateWithoutCoach_listInput, teamUncheckedCreateWithoutCoach_listInput>
  }

  export type teamUpdateWithWhereUniqueWithoutCoach_listInput = {
    where: teamWhereUniqueInput
    data: XOR<teamUpdateWithoutCoach_listInput, teamUncheckedUpdateWithoutCoach_listInput>
  }

  export type teamUpdateManyWithWhereWithoutCoach_listInput = {
    where: teamScalarWhereInput
    data: XOR<teamUpdateManyMutationInput, teamUncheckedUpdateManyWithoutCoach_listInput>
  }

  export type userCreateWithoutCreated_teamsInput = {
    id: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teams?: teamCreateNestedManyWithoutPlayer_listInput
    coaching_teams?: teamCreateNestedManyWithoutCoach_listInput
  }

  export type userUncheckedCreateWithoutCreated_teamsInput = {
    id: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teams?: teamUncheckedCreateNestedManyWithoutPlayer_listInput
    coaching_teams?: teamUncheckedCreateNestedManyWithoutCoach_listInput
  }

  export type userCreateOrConnectWithoutCreated_teamsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCreated_teamsInput, userUncheckedCreateWithoutCreated_teamsInput>
  }

  export type userCreateWithoutTeamsInput = {
    id: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    created_teams?: teamCreateNestedManyWithoutCreatorInput
    coaching_teams?: teamCreateNestedManyWithoutCoach_listInput
  }

  export type userUncheckedCreateWithoutTeamsInput = {
    id: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    created_teams?: teamUncheckedCreateNestedManyWithoutCreatorInput
    coaching_teams?: teamUncheckedCreateNestedManyWithoutCoach_listInput
  }

  export type userCreateOrConnectWithoutTeamsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutTeamsInput, userUncheckedCreateWithoutTeamsInput>
  }

  export type userCreateWithoutCoaching_teamsInput = {
    id: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    created_teams?: teamCreateNestedManyWithoutCreatorInput
    teams?: teamCreateNestedManyWithoutPlayer_listInput
  }

  export type userUncheckedCreateWithoutCoaching_teamsInput = {
    id: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    created_teams?: teamUncheckedCreateNestedManyWithoutCreatorInput
    teams?: teamUncheckedCreateNestedManyWithoutPlayer_listInput
  }

  export type userCreateOrConnectWithoutCoaching_teamsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCoaching_teamsInput, userUncheckedCreateWithoutCoaching_teamsInput>
  }

  export type gameCreateWithoutHome_teamInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    away_team: teamCreateNestedOneWithoutAway_gamesInput
    tournament?: tournamentCreateNestedOneWithoutGame_listInput
  }

  export type gameUncheckedCreateWithoutHome_teamInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    away_team_id: string
    tournament_id: string
  }

  export type gameCreateOrConnectWithoutHome_teamInput = {
    where: gameWhereUniqueInput
    create: XOR<gameCreateWithoutHome_teamInput, gameUncheckedCreateWithoutHome_teamInput>
  }

  export type gameCreateManyHome_teamInputEnvelope = {
    data: gameCreateManyHome_teamInput | gameCreateManyHome_teamInput[]
    skipDuplicates?: boolean
  }

  export type gameCreateWithoutAway_teamInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    home_team: teamCreateNestedOneWithoutHome_gamesInput
    tournament?: tournamentCreateNestedOneWithoutGame_listInput
  }

  export type gameUncheckedCreateWithoutAway_teamInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    home_team_id: string
    tournament_id: string
  }

  export type gameCreateOrConnectWithoutAway_teamInput = {
    where: gameWhereUniqueInput
    create: XOR<gameCreateWithoutAway_teamInput, gameUncheckedCreateWithoutAway_teamInput>
  }

  export type gameCreateManyAway_teamInputEnvelope = {
    data: gameCreateManyAway_teamInput | gameCreateManyAway_teamInput[]
    skipDuplicates?: boolean
  }

  export type tournamentCreateWithoutTeam_listInput = {
    id: string
    tournament_name: string
    tournament_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game_list?: gameCreateNestedManyWithoutTournamentInput
  }

  export type tournamentUncheckedCreateWithoutTeam_listInput = {
    id: string
    tournament_name: string
    tournament_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game_list?: gameUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type tournamentCreateOrConnectWithoutTeam_listInput = {
    where: tournamentWhereUniqueInput
    create: XOR<tournamentCreateWithoutTeam_listInput, tournamentUncheckedCreateWithoutTeam_listInput>
  }

  export type userUpsertWithoutCreated_teamsInput = {
    update: XOR<userUpdateWithoutCreated_teamsInput, userUncheckedUpdateWithoutCreated_teamsInput>
    create: XOR<userCreateWithoutCreated_teamsInput, userUncheckedCreateWithoutCreated_teamsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutCreated_teamsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutCreated_teamsInput, userUncheckedUpdateWithoutCreated_teamsInput>
  }

  export type userUpdateWithoutCreated_teamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: teamUpdateManyWithoutPlayer_listNestedInput
    coaching_teams?: teamUpdateManyWithoutCoach_listNestedInput
  }

  export type userUncheckedUpdateWithoutCreated_teamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: teamUncheckedUpdateManyWithoutPlayer_listNestedInput
    coaching_teams?: teamUncheckedUpdateManyWithoutCoach_listNestedInput
  }

  export type userUpsertWithWhereUniqueWithoutTeamsInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutTeamsInput, userUncheckedUpdateWithoutTeamsInput>
    create: XOR<userCreateWithoutTeamsInput, userUncheckedCreateWithoutTeamsInput>
  }

  export type userUpdateWithWhereUniqueWithoutTeamsInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutTeamsInput, userUncheckedUpdateWithoutTeamsInput>
  }

  export type userUpdateManyWithWhereWithoutTeamsInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutTeamsInput>
  }

  export type userScalarWhereInput = {
    AND?: userScalarWhereInput | userScalarWhereInput[]
    OR?: userScalarWhereInput[]
    NOT?: userScalarWhereInput | userScalarWhereInput[]
    id?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    username?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    avatar?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
  }

  export type userUpsertWithWhereUniqueWithoutCoaching_teamsInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutCoaching_teamsInput, userUncheckedUpdateWithoutCoaching_teamsInput>
    create: XOR<userCreateWithoutCoaching_teamsInput, userUncheckedCreateWithoutCoaching_teamsInput>
  }

  export type userUpdateWithWhereUniqueWithoutCoaching_teamsInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutCoaching_teamsInput, userUncheckedUpdateWithoutCoaching_teamsInput>
  }

  export type userUpdateManyWithWhereWithoutCoaching_teamsInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutCoaching_teamsInput>
  }

  export type gameUpsertWithWhereUniqueWithoutHome_teamInput = {
    where: gameWhereUniqueInput
    update: XOR<gameUpdateWithoutHome_teamInput, gameUncheckedUpdateWithoutHome_teamInput>
    create: XOR<gameCreateWithoutHome_teamInput, gameUncheckedCreateWithoutHome_teamInput>
  }

  export type gameUpdateWithWhereUniqueWithoutHome_teamInput = {
    where: gameWhereUniqueInput
    data: XOR<gameUpdateWithoutHome_teamInput, gameUncheckedUpdateWithoutHome_teamInput>
  }

  export type gameUpdateManyWithWhereWithoutHome_teamInput = {
    where: gameScalarWhereInput
    data: XOR<gameUpdateManyMutationInput, gameUncheckedUpdateManyWithoutHome_teamInput>
  }

  export type gameScalarWhereInput = {
    AND?: gameScalarWhereInput | gameScalarWhereInput[]
    OR?: gameScalarWhereInput[]
    NOT?: gameScalarWhereInput | gameScalarWhereInput[]
    id?: StringFilter<"game"> | string
    game_date?: DateTimeFilter<"game"> | Date | string
    home_team_score?: IntNullableFilter<"game"> | number | null
    away_team_score?: IntNullableFilter<"game"> | number | null
    createdAt?: DateTimeFilter<"game"> | Date | string
    updatedAt?: DateTimeFilter<"game"> | Date | string
    home_team_id?: StringFilter<"game"> | string
    away_team_id?: StringFilter<"game"> | string
    tournament_id?: StringFilter<"game"> | string
  }

  export type gameUpsertWithWhereUniqueWithoutAway_teamInput = {
    where: gameWhereUniqueInput
    update: XOR<gameUpdateWithoutAway_teamInput, gameUncheckedUpdateWithoutAway_teamInput>
    create: XOR<gameCreateWithoutAway_teamInput, gameUncheckedCreateWithoutAway_teamInput>
  }

  export type gameUpdateWithWhereUniqueWithoutAway_teamInput = {
    where: gameWhereUniqueInput
    data: XOR<gameUpdateWithoutAway_teamInput, gameUncheckedUpdateWithoutAway_teamInput>
  }

  export type gameUpdateManyWithWhereWithoutAway_teamInput = {
    where: gameScalarWhereInput
    data: XOR<gameUpdateManyMutationInput, gameUncheckedUpdateManyWithoutAway_teamInput>
  }

  export type tournamentUpsertWithWhereUniqueWithoutTeam_listInput = {
    where: tournamentWhereUniqueInput
    update: XOR<tournamentUpdateWithoutTeam_listInput, tournamentUncheckedUpdateWithoutTeam_listInput>
    create: XOR<tournamentCreateWithoutTeam_listInput, tournamentUncheckedCreateWithoutTeam_listInput>
  }

  export type tournamentUpdateWithWhereUniqueWithoutTeam_listInput = {
    where: tournamentWhereUniqueInput
    data: XOR<tournamentUpdateWithoutTeam_listInput, tournamentUncheckedUpdateWithoutTeam_listInput>
  }

  export type tournamentUpdateManyWithWhereWithoutTeam_listInput = {
    where: tournamentScalarWhereInput
    data: XOR<tournamentUpdateManyMutationInput, tournamentUncheckedUpdateManyWithoutTeam_listInput>
  }

  export type tournamentScalarWhereInput = {
    AND?: tournamentScalarWhereInput | tournamentScalarWhereInput[]
    OR?: tournamentScalarWhereInput[]
    NOT?: tournamentScalarWhereInput | tournamentScalarWhereInput[]
    id?: StringFilter<"tournament"> | string
    tournament_name?: StringFilter<"tournament"> | string
    tournament_avatar?: StringNullableFilter<"tournament"> | string | null
    createdAt?: DateTimeFilter<"tournament"> | Date | string
    updatedAt?: DateTimeFilter<"tournament"> | Date | string
  }

  export type teamCreateWithoutHome_gamesInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: userCreateNestedOneWithoutCreated_teamsInput
    player_list?: userCreateNestedManyWithoutTeamsInput
    coach_list?: userCreateNestedManyWithoutCoaching_teamsInput
    away_games?: gameCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentCreateNestedManyWithoutTeam_listInput
  }

  export type teamUncheckedCreateWithoutHome_gamesInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_creator_id: string
    player_list?: userUncheckedCreateNestedManyWithoutTeamsInput
    coach_list?: userUncheckedCreateNestedManyWithoutCoaching_teamsInput
    away_games?: gameUncheckedCreateNestedManyWithoutAway_teamInput
    tournaments?: tournamentUncheckedCreateNestedManyWithoutTeam_listInput
  }

  export type teamCreateOrConnectWithoutHome_gamesInput = {
    where: teamWhereUniqueInput
    create: XOR<teamCreateWithoutHome_gamesInput, teamUncheckedCreateWithoutHome_gamesInput>
  }

  export type teamCreateWithoutAway_gamesInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: userCreateNestedOneWithoutCreated_teamsInput
    player_list?: userCreateNestedManyWithoutTeamsInput
    coach_list?: userCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameCreateNestedManyWithoutHome_teamInput
    tournaments?: tournamentCreateNestedManyWithoutTeam_listInput
  }

  export type teamUncheckedCreateWithoutAway_gamesInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_creator_id: string
    player_list?: userUncheckedCreateNestedManyWithoutTeamsInput
    coach_list?: userUncheckedCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameUncheckedCreateNestedManyWithoutHome_teamInput
    tournaments?: tournamentUncheckedCreateNestedManyWithoutTeam_listInput
  }

  export type teamCreateOrConnectWithoutAway_gamesInput = {
    where: teamWhereUniqueInput
    create: XOR<teamCreateWithoutAway_gamesInput, teamUncheckedCreateWithoutAway_gamesInput>
  }

  export type tournamentCreateWithoutGame_listInput = {
    id: string
    tournament_name: string
    tournament_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_list?: teamCreateNestedManyWithoutTournamentsInput
  }

  export type tournamentUncheckedCreateWithoutGame_listInput = {
    id: string
    tournament_name: string
    tournament_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_list?: teamUncheckedCreateNestedManyWithoutTournamentsInput
  }

  export type tournamentCreateOrConnectWithoutGame_listInput = {
    where: tournamentWhereUniqueInput
    create: XOR<tournamentCreateWithoutGame_listInput, tournamentUncheckedCreateWithoutGame_listInput>
  }

  export type teamUpsertWithoutHome_gamesInput = {
    update: XOR<teamUpdateWithoutHome_gamesInput, teamUncheckedUpdateWithoutHome_gamesInput>
    create: XOR<teamCreateWithoutHome_gamesInput, teamUncheckedCreateWithoutHome_gamesInput>
    where?: teamWhereInput
  }

  export type teamUpdateToOneWithWhereWithoutHome_gamesInput = {
    where?: teamWhereInput
    data: XOR<teamUpdateWithoutHome_gamesInput, teamUncheckedUpdateWithoutHome_gamesInput>
  }

  export type teamUpdateWithoutHome_gamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: userUpdateOneRequiredWithoutCreated_teamsNestedInput
    player_list?: userUpdateManyWithoutTeamsNestedInput
    coach_list?: userUpdateManyWithoutCoaching_teamsNestedInput
    away_games?: gameUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUncheckedUpdateWithoutHome_gamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
    player_list?: userUncheckedUpdateManyWithoutTeamsNestedInput
    coach_list?: userUncheckedUpdateManyWithoutCoaching_teamsNestedInput
    away_games?: gameUncheckedUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUncheckedUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUpsertWithoutAway_gamesInput = {
    update: XOR<teamUpdateWithoutAway_gamesInput, teamUncheckedUpdateWithoutAway_gamesInput>
    create: XOR<teamCreateWithoutAway_gamesInput, teamUncheckedCreateWithoutAway_gamesInput>
    where?: teamWhereInput
  }

  export type teamUpdateToOneWithWhereWithoutAway_gamesInput = {
    where?: teamWhereInput
    data: XOR<teamUpdateWithoutAway_gamesInput, teamUncheckedUpdateWithoutAway_gamesInput>
  }

  export type teamUpdateWithoutAway_gamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: userUpdateOneRequiredWithoutCreated_teamsNestedInput
    player_list?: userUpdateManyWithoutTeamsNestedInput
    coach_list?: userUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUpdateManyWithoutHome_teamNestedInput
    tournaments?: tournamentUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUncheckedUpdateWithoutAway_gamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
    player_list?: userUncheckedUpdateManyWithoutTeamsNestedInput
    coach_list?: userUncheckedUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUncheckedUpdateManyWithoutHome_teamNestedInput
    tournaments?: tournamentUncheckedUpdateManyWithoutTeam_listNestedInput
  }

  export type tournamentUpsertWithoutGame_listInput = {
    update: XOR<tournamentUpdateWithoutGame_listInput, tournamentUncheckedUpdateWithoutGame_listInput>
    create: XOR<tournamentCreateWithoutGame_listInput, tournamentUncheckedCreateWithoutGame_listInput>
    where?: tournamentWhereInput
  }

  export type tournamentUpdateToOneWithWhereWithoutGame_listInput = {
    where?: tournamentWhereInput
    data: XOR<tournamentUpdateWithoutGame_listInput, tournamentUncheckedUpdateWithoutGame_listInput>
  }

  export type tournamentUpdateWithoutGame_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournament_name?: StringFieldUpdateOperationsInput | string
    tournament_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_list?: teamUpdateManyWithoutTournamentsNestedInput
  }

  export type tournamentUncheckedUpdateWithoutGame_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournament_name?: StringFieldUpdateOperationsInput | string
    tournament_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_list?: teamUncheckedUpdateManyWithoutTournamentsNestedInput
  }

  export type teamCreateWithoutTournamentsInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: userCreateNestedOneWithoutCreated_teamsInput
    player_list?: userCreateNestedManyWithoutTeamsInput
    coach_list?: userCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameCreateNestedManyWithoutHome_teamInput
    away_games?: gameCreateNestedManyWithoutAway_teamInput
  }

  export type teamUncheckedCreateWithoutTournamentsInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    team_creator_id: string
    player_list?: userUncheckedCreateNestedManyWithoutTeamsInput
    coach_list?: userUncheckedCreateNestedManyWithoutCoaching_teamsInput
    home_games?: gameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: gameUncheckedCreateNestedManyWithoutAway_teamInput
  }

  export type teamCreateOrConnectWithoutTournamentsInput = {
    where: teamWhereUniqueInput
    create: XOR<teamCreateWithoutTournamentsInput, teamUncheckedCreateWithoutTournamentsInput>
  }

  export type gameCreateWithoutTournamentInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    home_team: teamCreateNestedOneWithoutHome_gamesInput
    away_team: teamCreateNestedOneWithoutAway_gamesInput
  }

  export type gameUncheckedCreateWithoutTournamentInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    home_team_id: string
    away_team_id: string
  }

  export type gameCreateOrConnectWithoutTournamentInput = {
    where: gameWhereUniqueInput
    create: XOR<gameCreateWithoutTournamentInput, gameUncheckedCreateWithoutTournamentInput>
  }

  export type gameCreateManyTournamentInputEnvelope = {
    data: gameCreateManyTournamentInput | gameCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type teamUpsertWithWhereUniqueWithoutTournamentsInput = {
    where: teamWhereUniqueInput
    update: XOR<teamUpdateWithoutTournamentsInput, teamUncheckedUpdateWithoutTournamentsInput>
    create: XOR<teamCreateWithoutTournamentsInput, teamUncheckedCreateWithoutTournamentsInput>
  }

  export type teamUpdateWithWhereUniqueWithoutTournamentsInput = {
    where: teamWhereUniqueInput
    data: XOR<teamUpdateWithoutTournamentsInput, teamUncheckedUpdateWithoutTournamentsInput>
  }

  export type teamUpdateManyWithWhereWithoutTournamentsInput = {
    where: teamScalarWhereInput
    data: XOR<teamUpdateManyMutationInput, teamUncheckedUpdateManyWithoutTournamentsInput>
  }

  export type gameUpsertWithWhereUniqueWithoutTournamentInput = {
    where: gameWhereUniqueInput
    update: XOR<gameUpdateWithoutTournamentInput, gameUncheckedUpdateWithoutTournamentInput>
    create: XOR<gameCreateWithoutTournamentInput, gameUncheckedCreateWithoutTournamentInput>
  }

  export type gameUpdateWithWhereUniqueWithoutTournamentInput = {
    where: gameWhereUniqueInput
    data: XOR<gameUpdateWithoutTournamentInput, gameUncheckedUpdateWithoutTournamentInput>
  }

  export type gameUpdateManyWithWhereWithoutTournamentInput = {
    where: gameScalarWhereInput
    data: XOR<gameUpdateManyMutationInput, gameUncheckedUpdateManyWithoutTournamentInput>
  }

  export type teamCreateManyCreatorInput = {
    id: string
    team_name: string
    team_avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type teamUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player_list?: userUpdateManyWithoutTeamsNestedInput
    coach_list?: userUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player_list?: userUncheckedUpdateManyWithoutTeamsNestedInput
    coach_list?: userUncheckedUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUncheckedUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUncheckedUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type teamUpdateWithoutPlayer_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: userUpdateOneRequiredWithoutCreated_teamsNestedInput
    coach_list?: userUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUncheckedUpdateWithoutPlayer_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
    coach_list?: userUncheckedUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUncheckedUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUncheckedUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUncheckedUpdateManyWithoutPlayer_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
  }

  export type teamUpdateWithoutCoach_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: userUpdateOneRequiredWithoutCreated_teamsNestedInput
    player_list?: userUpdateManyWithoutTeamsNestedInput
    home_games?: gameUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUncheckedUpdateWithoutCoach_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
    player_list?: userUncheckedUpdateManyWithoutTeamsNestedInput
    home_games?: gameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUncheckedUpdateManyWithoutAway_teamNestedInput
    tournaments?: tournamentUncheckedUpdateManyWithoutTeam_listNestedInput
  }

  export type teamUncheckedUpdateManyWithoutCoach_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
  }

  export type gameCreateManyHome_teamInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    away_team_id: string
    tournament_id: string
  }

  export type gameCreateManyAway_teamInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    home_team_id: string
    tournament_id: string
  }

  export type userUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_teams?: teamUpdateManyWithoutCreatorNestedInput
    coaching_teams?: teamUpdateManyWithoutCoach_listNestedInput
  }

  export type userUncheckedUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_teams?: teamUncheckedUpdateManyWithoutCreatorNestedInput
    coaching_teams?: teamUncheckedUpdateManyWithoutCoach_listNestedInput
  }

  export type userUncheckedUpdateManyWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUpdateWithoutCoaching_teamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_teams?: teamUpdateManyWithoutCreatorNestedInput
    teams?: teamUpdateManyWithoutPlayer_listNestedInput
  }

  export type userUncheckedUpdateWithoutCoaching_teamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_teams?: teamUncheckedUpdateManyWithoutCreatorNestedInput
    teams?: teamUncheckedUpdateManyWithoutPlayer_listNestedInput
  }

  export type userUncheckedUpdateManyWithoutCoaching_teamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gameUpdateWithoutHome_teamInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team?: teamUpdateOneRequiredWithoutAway_gamesNestedInput
    tournament?: tournamentUpdateOneWithoutGame_listNestedInput
  }

  export type gameUncheckedUpdateWithoutHome_teamInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team_id?: StringFieldUpdateOperationsInput | string
    tournament_id?: StringFieldUpdateOperationsInput | string
  }

  export type gameUncheckedUpdateManyWithoutHome_teamInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team_id?: StringFieldUpdateOperationsInput | string
    tournament_id?: StringFieldUpdateOperationsInput | string
  }

  export type gameUpdateWithoutAway_teamInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team?: teamUpdateOneRequiredWithoutHome_gamesNestedInput
    tournament?: tournamentUpdateOneWithoutGame_listNestedInput
  }

  export type gameUncheckedUpdateWithoutAway_teamInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_id?: StringFieldUpdateOperationsInput | string
    tournament_id?: StringFieldUpdateOperationsInput | string
  }

  export type gameUncheckedUpdateManyWithoutAway_teamInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_id?: StringFieldUpdateOperationsInput | string
    tournament_id?: StringFieldUpdateOperationsInput | string
  }

  export type tournamentUpdateWithoutTeam_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournament_name?: StringFieldUpdateOperationsInput | string
    tournament_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_list?: gameUpdateManyWithoutTournamentNestedInput
  }

  export type tournamentUncheckedUpdateWithoutTeam_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournament_name?: StringFieldUpdateOperationsInput | string
    tournament_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_list?: gameUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type tournamentUncheckedUpdateManyWithoutTeam_listInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournament_name?: StringFieldUpdateOperationsInput | string
    tournament_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gameCreateManyTournamentInput = {
    id: string
    game_date: Date | string
    home_team_score?: number | null
    away_team_score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    home_team_id: string
    away_team_id: string
  }

  export type teamUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: userUpdateOneRequiredWithoutCreated_teamsNestedInput
    player_list?: userUpdateManyWithoutTeamsNestedInput
    coach_list?: userUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUpdateManyWithoutAway_teamNestedInput
  }

  export type teamUncheckedUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
    player_list?: userUncheckedUpdateManyWithoutTeamsNestedInput
    coach_list?: userUncheckedUpdateManyWithoutCoaching_teamsNestedInput
    home_games?: gameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: gameUncheckedUpdateManyWithoutAway_teamNestedInput
  }

  export type teamUncheckedUpdateManyWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_name?: StringFieldUpdateOperationsInput | string
    team_avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_creator_id?: StringFieldUpdateOperationsInput | string
  }

  export type gameUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team?: teamUpdateOneRequiredWithoutHome_gamesNestedInput
    away_team?: teamUpdateOneRequiredWithoutAway_gamesNestedInput
  }

  export type gameUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_id?: StringFieldUpdateOperationsInput | string
    away_team_id?: StringFieldUpdateOperationsInput | string
  }

  export type gameUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    game_date?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    away_team_score?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team_id?: StringFieldUpdateOperationsInput | string
    away_team_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentCountOutputTypeDefaultArgs instead
     */
    export type TournamentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use teamDefaultArgs instead
     */
    export type teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = teamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use gameDefaultArgs instead
     */
    export type gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = gameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use tournamentDefaultArgs instead
     */
    export type tournamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = tournamentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}